{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/assets/chartData.json","webpack:///./src/utils/ObjectUtils.ts","webpack:///./src/utils/ComponentUtils.ts","webpack:///./src/utils/StyleUtils.ts","webpack:///./src/utils/DomUtils.ts","webpack:///./src/components/PolyLine/PolyLine.ts","webpack:///./src/utils/ArrayUtils/ArrayUtils.ts","webpack:///./src/utils/MathUtils/MathUtils.ts","webpack:///./src/utils/ChartDataUtils/ChartDataUtils.ts","webpack:///./src/utils/EventUtils.ts","webpack:///./src/components/MousePointer/_Circle.ts","webpack:///./src/components/MousePointer/_Ruler.ts","webpack:///./src/components/MousePointer/_Caption.ts","webpack:///./src/components/MousePointer/MousePointer.ts","webpack:///./src/components/Grid/_YScale.ts","webpack:///./src/components/Grid/Grid.ts","webpack:///./src/components/RangeSelector/_SelectionOverlay.ts","webpack:///./src/components/RangeSelector/RangeSelector.ts","webpack:///./src/components/ColSwitch/_SwitchButton.ts","webpack:///./src/components/ColSwitch/ColSwitch.ts","webpack:///./src/components/Chart/Chart.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ObjectUtils","func","obj","objs","keys","map","keyOfO","[object Object]","assign","forEach","ComponentUtils","render","remove","renderParams","self","reRender","partialParams","fullParams","_objectSpread","SIZES_PX","lineThin","lineBold","pointerCircleRadius","scaleText","switchText","COLORS_BY_MODE","day","ruler","horizontalScale","text","gridText","background","switchBorder","rangerOverlay","rangerBorder","night","StyleUtils","common","fast","width","aspectRatio","pxInPercent","sizePx","setElementStyle","element","style","options","replaceWholeStyleObject","setAttribute","setGlobalStyle","document","body","DomUtils","createElementNS","containerEl","clientWidth","clientHeight","type","cursor","isDisabled","userSelect","msUserSelect","webkitUserSelect","msTouchSelect","PolyLine","xPointsInPercents","yPointsInPercents","color","svg","isThin","isHidden","pathData","x","index","join","calcPathData","path","transition","appendChild","sizesInPercent","strokeWidth","String","opacity","parentElement","removeChild","getIndexByPercent","arr","percent","Error","length","Math","round","ArrayUtils","min","max","indexMin","indexMax","slice","getBoundingPointsIndexes","points","point","indexOfPrev","filter","indexOfNext","findIndex","getIsNumBeauty","num","lastZeroes","numRest","MathUtils","nextPoint","prevPoint","getTwoBoundingPoints","parts","range","rawDivider","rawPartStr","zeroesStr","divider","Number","resultDivisions","result","nextStep","push","number","minPart","target","floor","part","stepsNumber","ceil","steps","minValue","currentValue","prevValue","zeroesAdded","Infinity","mapPointsByKeys","columns","objects","mapPointsByType","types","line","data","concat","percentisePoints","isY","step","percentized","percentisePointsByKey","pointsByKey","xMax","xMin","yMax","yMin","isX","calcExtremums","possibleYMinDecreasingPercent","pointsByType","ChartDataUtils","chartData","chartDataCutted","ChartDataUtils_objectSpread","xMinPercent","xMaxPercent","col","cutColumn","includingYIndexes","xKey","find","yColumns","yColumnsFiltered","_","includes","xColumn","names","colors","ids","id","includingIds","extremums","pointsByKeyPercentised","yKeys","getFinalDataByKey","pointsPercentised","pointsOriginal","params","EventUtils","handler","timeout","eventTimeout","args","window","setTimeout","onGrabStart","onGrab","onGrabEnd","isDown","initialX","initialY","addEventListener","event","y","xOffset","yOffset","Circle","isVisible","circle","xProportionated","sizes","display","Ruler","updateElements","container","yValuesOriginal","header","rootEl","offsetWidth","containerWidth","leftSideX","missingLeft","needStickToRight","padding","position","right","left","backgroundColor","boxShadow","borderRadius","top","headerEl","innerText","descriptionEls","el","yCol","paddingLeft","innerHTML","renderDescriptionHtml","updateDescriptionEl","Caption","instance","createElement","minWidth","fontSize","boxSizing","pointerEvents","flexBasis","descriptionsWrapper","flexWrap","justifyContent","marginTop","_Caption_objectSpread","getDateFormatted","timestamp","dateStr","Date","toString","weekDay","mon","split","MousePointer","xPercent","xPoint","xOriginal","xIndex","indexOf","yValuesPercentised","circles","caption","yColumn","YScale","yOriginal","yPercentised","isZeroScale","lineColor","textPadding","bottom","renderXScales","selfs","widthPercent","xContainerPaddingLeftPx","pointsNumber","renderYScales","height","yMarkers","yMarkersPercentised","rerenderedScales","scale","Grid","yScales","xScales","xScalesContainer","handleGrabStart","handleGrab","direction","x1Initial","x2Initial","offsetPercent","newX1","newX2","newWidth","x1Resize","x2Resize","widthDif","minWidthLacking","x1","x2","_SelectionOverlay_objectSpread","onChange","handleGrabEnd","updateOverlayEl","leftPercent","rightPercent","initialX1","initialX2","rangerEl","borders","border","paramsWithInstance","overlays","overlay","borderEl","borderLeftStyle","borderTopStyle","borderLeft","borderRight","borderTop","borderBottom","touchAction","updateRangerEl","updateBorderEl","SelectionOverlay","RangeSelector","polyLinesData","polyLines","polyLine","selectionOverlay","RangeSelector_objectSpread","SwitchButton","isChecked","onClick","root","checkbox","textEl","alignItems","marginRight","checkMark","children","buttons","button","checkedIndexes","clickHandlerWrapper","handleClick","params2","ColSwitch_objectSpread","ColSwitch","InitialData","grid","mousePointer","rangeSelector","colSwitch","headerContainer","svgContainer","xScaleContainer","mainContainer","rangeSelectorContainer","switchContainer","flexDirection","lineHeight","fontWeight","flex","renderDom","chartDataUncut","checkedIndexesChangeHandlerWrapper","onChage","indexes","xPointsPercentised","column","currentPointerX","rangeSelectorChangeHandlerWrapper","Chart_objectSpread","handleCheckedIndexesChange","handleRangeSelectionChange","getBoundingClientRect","mousePercentX","clientX","handleMouseMove","handleMouseLeave","handleResize","Chart","fetch","chartDataUrl","then","json","loadChartData","allChartsContainer","getElementsByClassName","charts","footer","dayNightSwitch","textsByMode","currentMode","chart"],"mappings":"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","file":"main.d4cae69b4506647ad470.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __webpack_public_path__ + \"07668984a136df2dcb7b1f086c6ffad9.json\";","const map = <O extends {}, R>(\n    func: (value: O[keyof O], key: keyof O, obj: O) => R,\n    obj: O,\n) => {\n    const objs = Object.keys(obj).map(key => {\n        const keyOfO: keyof O = key as keyof O;\n        const value = obj[keyOfO];\n        return { [key]: func(value, keyOfO, obj) };\n    });\n\n    // TODO: think, how to return right type if func returns not type of obj[key]\n    return Object.assign({}, ...objs) as O;\n};\n\nconst forEach = <O extends {}>(\n    func: (value: O[keyof O], key: keyof O, obj: O) => void,\n    obj: O,\n) => {\n    Object.keys(obj).forEach(key => {\n        const keyOfO: keyof O = key as keyof O;\n        const value = obj[keyOfO];\n        func(value, keyOfO, obj);\n    });\n};\n\nexport const ObjectUtils = {\n    map,\n    forEach,\n};\n","import { ObjectUtils } from 'src/utils/ObjectUtils';\n\nconst create = <I, RP extends { self?: I }>(\n    render: (params: RP) => I,\n    remove?: (self: I) => void,\n) => {\n    type RenderParams = RP;\n    return {\n        render: (renderParams: RenderParams) => {\n            const self = render(renderParams as RP);\n            return {\n                reRender: (partialParams: Partial<RenderParams> = {}) => {\n                    const fullParams = ObjectUtils.map((value, key) => {\n                        if (\n                            Object.prototype.hasOwnProperty.call(\n                                partialParams,\n                                key,\n                            )\n                        ) {\n                            return partialParams[key];\n                        }\n                        return value;\n                    }, renderParams);\n\n                    // eslint-disable-next-line no-param-reassign\n                    renderParams = {\n                        self,\n                        ...partialParams,\n                        ...renderParams,\n                        ...fullParams,\n                    };\n\n                    render(renderParams);\n                },\n\n                remove: () => remove(self),\n            };\n        },\n    };\n};\n\nexport const ComponentUtils = {\n    create,\n};\n","import { ObjectUtils } from 'src/utils/ObjectUtils';\n\nconst SIZES_PX = {\n    lineThin: 1,\n    lineBold: 3,\n    pointerCircleRadius: 5,\n    scaleText: 10,\n    switchText: 13,\n};\n\nconst COLORS = {\n    ruler: '#DFE6EB',\n    horizontalScale: '#F2F4F5',\n    scaleText: '#96A2AA',\n    text: '#222222',\n    gridText: '#96A2AA',\n    background: '#fff',\n    switchBorder: '#E6ECF0',\n    rangerOverlay: 'rgba(242, 247, 249, 0.75)',\n    rangerBorder: 'rgba(201, 220, 232, 0.5)',\n};\n\nconst COLORS_NIGHT = {\n    background: '#242F3D',\n    ruler: '#3C4A59',\n    horizontalScale: '#293543',\n    text: '#fff',\n    gridText: '#556777',\n    switchBorder: '#354657',\n    rangerOverlay: 'rgba(31, 42, 55, 0.75)',\n    rangerBorder: 'rgba(65, 86, 106, 0.5)',\n\n    scaleText: '#556777',\n};\n\nconst COLORS_BY_MODE = {\n    day: COLORS,\n    night: COLORS_NIGHT,\n};\n\nconst TIMINGS_S = {\n    common: 0.3,\n    fast: 0.1,\n};\n\nexport type ColorMode = 'day' | 'night';\n\nconst getColors = ({ mode }: { mode: ColorMode }) => {\n    return COLORS_BY_MODE[mode];\n};\n\nconst getSizesInPercents = (width: number, aspectRatio: number = 1) => {\n    const pxInPercent = width / (100 * aspectRatio);\n\n    return ObjectUtils.map(sizePx => sizePx / pxInPercent, SIZES_PX);\n};\n\nexport const StyleUtils = {\n    SIZES_PX,\n    TIMINGS_S,\n    getSizesInPercents,\n    getColors,\n};\n","import { ObjectUtils } from 'src/utils/ObjectUtils';\nimport { Omit } from 'src/utils/Types';\n\ntype StyleSetterOptions = {\n    replaceWholeStyleObject?: boolean;\n};\ntype PartialCSSStyleDeclaration = Omit<\n    Partial<CSSStyleDeclaration>,\n    'length' | 'parentRule'\n>;\nconst setElementStyle = (\n    element: HTMLElement | SVGElement,\n    style: PartialCSSStyleDeclaration,\n    options: StyleSetterOptions = {},\n) => {\n    if (options.replaceWholeStyleObject) {\n        element.setAttribute('style', '');\n    }\n\n    ObjectUtils.forEach((value, key) => {\n        // eslint-disable-next-line no-param-reassign\n        element.style[key] = value;\n    }, style);\n};\n\nconst createSvgElement = <T extends SVGElement>(name: string) => {\n    return document.createElementNS('http://www.w3.org/2000/svg', name) as T;\n};\n\nconst getAspectRatio = (containerEl: Element) => {\n    const containerWidth = containerEl.clientWidth;\n    const containerHeight = containerEl.clientHeight;\n\n    return containerWidth / containerHeight;\n};\n\nconst setGlobalStyle = (style: PartialCSSStyleDeclaration) => {\n    setElementStyle(document.body, style);\n};\n\nconst setCursorGlobally = (type: string) => {\n    setGlobalStyle({\n        cursor: type,\n    });\n};\nconst setUserSelectDisabled = (isDisabled: boolean) => {\n    const value = isDisabled ? 'none' : '';\n\n    setGlobalStyle({\n        userSelect: value,\n        msUserSelect: value,\n        webkitUserSelect: value,\n        msTouchSelect: value,\n    });\n};\n\nexport const DomUtils = {\n    setElementStyle,\n    setGlobalStyle,\n    createSvgElement,\n    getAspectRatio,\n    setCursorGlobally,\n    setUserSelectDisabled,\n};\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { StyleUtils } from 'src/utils/StyleUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\n\nconst calcPathData = (\n    xPointsInPercents: number[],\n    yPointsInPercents: number[],\n    aspectRatio: number,\n) => {\n    const xPointsProportionated = xPointsInPercents.map(x => x * aspectRatio);\n    const linesCoordinates = xPointsProportionated.map((x, index) => {\n        const y = yPointsInPercents[index];\n\n        return `${x} ${y}`;\n    });\n    return `M ${linesCoordinates.join(' L ')}`;\n};\n\ntype RenderParams = {\n    xPointsInPercents: number[];\n    yPointsInPercents: number[];\n    color: string;\n    svg: SVGSVGElement;\n    aspectRatio: number;\n    isThin?: boolean;\n    isHidden?: boolean;\n    self?: SVGPathElement;\n};\n\nconst render = ({\n    xPointsInPercents,\n    yPointsInPercents,\n    color,\n    svg,\n    aspectRatio,\n    isThin = false,\n    self,\n    isHidden,\n}: RenderParams) => {\n    const pathData = calcPathData(\n        xPointsInPercents,\n        yPointsInPercents,\n        aspectRatio,\n    );\n\n    let path = self;\n    if (!path) {\n        path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        DomUtils.setElementStyle(path, {\n            transition: `${StyleUtils.TIMINGS_S.common}s`,\n        });\n        svg.appendChild(path);\n    }\n\n    const sizesInPercent = StyleUtils.getSizesInPercents(\n        svg.clientWidth,\n        aspectRatio,\n    );\n    const strokeWidth = isThin\n        ? sizesInPercent.lineThin\n        : sizesInPercent.lineBold;\n\n    path.setAttribute('stroke', color);\n    path.setAttribute('stroke-width', String(strokeWidth));\n    path.setAttribute('fill', 'none');\n    path.setAttribute('d', pathData);\n\n    if (isHidden) {\n        DomUtils.setElementStyle(path, { opacity: '0' });\n    } else {\n        DomUtils.setElementStyle(path, { opacity: '1' });\n    }\n\n    return path;\n};\n\nconst remove = (self: SVGPathElement) => {\n    self.parentElement.removeChild(self);\n};\n\nexport const PolyLine = ComponentUtils.create(render, remove);\nexport type PolyLineInstance = ReturnType<typeof PolyLine.render>;\n","const getIndexByPercent = (arr: any[], percent: number) => {\n    if (percent > 100 || percent < 0) {\n        throw new Error(`Provided not valid percent value: ${percent}`);\n    }\n\n    const length = arr.length - 1;\n    return Math.round((length * percent) / 100);\n};\n\nconst sliceByPercent = <T>(arr: T[], min: number, max: number) => {\n    const indexMin = getIndexByPercent(arr, min);\n    const indexMax = getIndexByPercent(arr, max) + 1; // Array.prototype.slice strange feature\n\n    return arr.slice(indexMin, indexMax);\n};\n\nexport const ArrayUtils = {\n    getIndexByPercent,\n    sliceByPercent,\n};\n","type LineYCalculatorParams = {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n};\nconst getYOfLineCalculator = ({ x1, y1, x2, y2 }: LineYCalculatorParams) => {\n    if (x1 === x2) {\n        return (x: number) => y1;\n    }\n    if (y1 === y2) {\n        return (x: number) => y1;\n    }\n    const k = (y2 - y1) / (x2 - x1);\n    const b = y1 - k * x1;\n    return (x: number) => {\n        return k * x + b;\n    };\n};\n\nconst getBoundingPointsIndexes = (points: number[], point: number) => {\n    const prevPoints = points.filter(p => p <= point);\n    let indexOfPrev = prevPoints.length - 1;\n    if (indexOfPrev === -1) {\n        indexOfPrev = 0;\n    }\n    let indexOfNext = points.findIndex(p => p >= point);\n    if (indexOfNext === -1) {\n        indexOfNext = points.length - 1;\n    }\n\n    return { indexOfPrev, indexOfNext };\n};\n\ntype BoundingPointsGetterParams = {\n    x: number;\n    xPoints: number[];\n    yPoints: number[];\n};\nconst getBoundingPoints = ({\n    x,\n    xPoints,\n    yPoints,\n}: BoundingPointsGetterParams) => {\n    const { indexOfNext, indexOfPrev } = getBoundingPointsIndexes(xPoints, x);\n\n    const y1 = yPoints[indexOfPrev];\n    const y2 = yPoints[indexOfNext];\n\n    const x1 = xPoints[indexOfPrev];\n    const x2 = xPoints[indexOfNext];\n\n    return {\n        x1,\n        x2,\n        y1,\n        y2,\n    };\n};\n\nconst getTwoBoundingPoints = (points: number[], point: number) => {\n    const { indexOfNext, indexOfPrev } = getBoundingPointsIndexes(\n        points,\n        point,\n    );\n    return { prevPoint: points[indexOfPrev], nextPoint: points[indexOfNext] };\n};\n\nconst getNearestPoint = (points: number[], point: number) => {\n    const { nextPoint, prevPoint } = getTwoBoundingPoints(points, point);\n    const prevDif = point - prevPoint;\n    const nextDif = nextPoint - point;\n    if (prevDif < nextDif) {\n        return prevPoint;\n    }\n    return nextPoint;\n};\n\ntype DividerParams = {\n    min?: number;\n    max: number;\n    parts: number;\n};\n\n// now it works somehow\n// TODO: fix to work with large numbers, decimal & negative\nconst divideToRoundParts = ({ max, min = 0, parts }: DividerParams) => {\n    const range = max - min;\n\n    const rawDivider = Math.round(range / parts) || 1;\n\n    const rawPartStr = String(rawDivider);\n\n    const zeroesStr = String(10 ** (rawPartStr.length - 1)).slice(1);\n\n    let divider = Number(rawPartStr.slice(0, 1) + zeroesStr);\n\n    let resultDivisions = range / divider;\n\n    while (resultDivisions > parts) {\n        divider = Number(divider) + Number(1 + zeroesStr);\n        resultDivisions = range / divider;\n    }\n\n    // while (resultDivisions < parts) {\n    //     divider /= 2;\n    //     resultDivisions = range / divider;\n    // }\n\n    // divider = Number(divider) + Number(1 + zeroesStr);\n    // resultDivisions = range / divider;\n    // }\n\n    const result: number[] = [min];\n    while (result[result.length - 1] !== max) {\n        let nextStep = result[result.length - 1] + divider;\n        if (nextStep > max) {\n            nextStep = max;\n        }\n        result.push(nextStep);\n    }\n\n    return result;\n};\n\nconst getIsNumBeauty = (num: number) => {\n    let lastZeroes = '';\n    let numRest = String(num);\n    while (numRest && numRest[numRest.length - 1] === '0') {\n        lastZeroes += '0';\n        numRest = numRest.slice(0, numRest.length - 1);\n    }\n    return lastZeroes.length >= numRest.length;\n};\n\nconst getLowerBeautyValue = (value: number, minValue: number) => {\n    if (minValue <= 0) {\n        return 0;\n    }\n\n    let currentValue = String(value);\n    let prevValue = String(value);\n    let zeroesAdded = 0;\n    while (+currentValue >= minValue) {\n        if (getIsNumBeauty(+currentValue)) {\n            return +currentValue;\n        }\n\n        prevValue = currentValue;\n\n        zeroesAdded++;\n        currentValue =\n            currentValue.slice(0, currentValue.length - zeroesAdded) +\n            String(10 ** zeroesAdded).slice(1, Infinity);\n    }\n\n    return +prevValue;\n};\n\nconst divideToEqualParts = ({\n    number,\n    minPart,\n}: {\n    number: number;\n    minPart: number;\n}) => {\n    const rawDivider = number / minPart;\n    const target = Math.floor(rawDivider);\n    const k = (target * minPart - number) / -target;\n\n    // found k by inserting different values here to get round divider, than solve this equation to get upper formulae\n    const divider = number / (minPart + k);\n\n    const part = number / divider;\n\n    const stepsNumber = Math.ceil(number / minPart);\n\n    const steps = [];\n    for (let i = 0; i < stepsNumber; i++) {\n        steps.push(Math.round(i * part));\n    }\n\n    return steps;\n};\n\n//\n//\n// Used it to calc point on Y by X, but realised pointers should be rendered\n// only on provided x points, not on values between provided points\n//\n//\n// const calcY = (x: number, xPoints: number[], yPoints: number[]) => {\n//     const boundingPoints = MathUtils.getBoundingPoints({ x, xPoints, yPoints });\n//     const yCalculator = MathUtils.getYOfLineCalculator(boundingPoints);\n//\n//     return yCalculator(x);\n// };\n// const yValuesPercentised = chartData.yColumns.map(yColumn =>\n//     calcY(\n//         x,\n//         chartData.xColumn.pointsPercentised,\n//         yColumn.pointsPercentised,\n//     ),\n// );\n// const yValuesOriginal = chartData.yColumns.map(yColumn =>\n//     Math.round(\n//         calcY(\n//             xOriginal,\n//             chartData.xColumn.pointsOriginal,\n//             yColumn.pointsOriginal,\n//         ),\n//     ),\n// );\n\nexport const MathUtils = {\n    getYOfLineCalculator,\n    getBoundingPointsIndexes,\n    getBoundingPoints,\n    getNearestPoint,\n    divideToRoundParts,\n    divideToEqualParts,\n    getIsNumBeauty,\n    getLowerBeautyValue,\n};\n","import { StringKeyMap } from 'src/utils/Types';\nimport { ObjectUtils } from 'src/utils/ObjectUtils';\nimport { ArrayUtils } from 'src/utils/ArrayUtils/ArrayUtils';\nimport { MathUtils } from 'src/utils/MathUtils/MathUtils';\nimport {\n    ChartData,\n    ChartRenderData,\n    ColumnData,\n    ColumnTypes,\n    Extremums,\n} from './ChartData.types';\n\nconst mapPointsByKeys = (columns: ColumnData[]) => {\n    const objects = columns.map(([name, ...points]) => ({\n        [name]: points,\n    }));\n    return Object.assign({}, ...objects) as StringKeyMap<number[]>;\n};\n\nconst mapPointsByType = (columns: ColumnData[], types: ColumnTypes) => {\n    const result: { line: number[]; x: number[] } = { line: [], x: [] };\n    columns.forEach(data => {\n        const [name, ...points] = data;\n        const type = types[name];\n        result[type] = result[type].concat(points);\n    });\n    return result;\n};\n\nconst percentisePoints = ({\n    points,\n    isY,\n    min = Math.min(...points),\n    max = Math.max(...points),\n}: {\n    points: number[];\n    isY?: boolean;\n    min?: number;\n    max?: number;\n}) => {\n    const percents = 100;\n    const step = percents / (max - min);\n\n    const pointsShifted = points.map(point => point - min);\n\n    const percentized = pointsShifted.map(point => point * step);\n    if (isY) {\n        return percentized.map(p => 100 - p);\n    }\n    return percentized;\n};\n\nconst percentisePointsByKey = (\n    pointsByKey: StringKeyMap<number[]>,\n    types: ColumnTypes,\n    { xMax, xMin, yMax, yMin }: Extremums,\n) => {\n    return ObjectUtils.map((value, key) => {\n        const isX = types[key] === 'x';\n        const min = isX ? xMin : yMin;\n        const max = isX ? xMax : yMax;\n        return percentisePoints({\n            points: pointsByKey[key],\n            isY: !isX,\n            min,\n            max,\n        });\n    }, pointsByKey);\n};\n\nconst calcExtremums = (\n    columns: ColumnData[],\n    types: ColumnTypes,\n    possibleYMinDecreasingPercent: number = 0,\n) => {\n    const pointsByType = mapPointsByType(columns, types);\n\n    const xMin = Math.min(...pointsByType.x);\n    const xMax = Math.max(...pointsByType.x);\n    let yMin = Math.min(...pointsByType.line);\n    const yMax = Math.max(...pointsByType.line);\n\n    if (possibleYMinDecreasingPercent) {\n        const range = yMax - yMin;\n        const possibleMin =\n            yMin - (range / 100) * possibleYMinDecreasingPercent;\n        yMin = MathUtils.getLowerBeautyValue(yMin, possibleMin);\n    }\n\n    return {\n        xMin,\n        yMax,\n        xMax,\n        yMin,\n    } as Extremums;\n};\n\nconst cutColumn = ([name, ...points]: ColumnData, min: number, max: number) => {\n    const slicedPoints = ArrayUtils.sliceByPercent(points, min, max);\n    return [name, ...slicedPoints] as ColumnData;\n};\n\nconst transformDataToRender = (\n    chartData: ChartData,\n    options: {\n        xMinPercent?: number;\n        xMaxPercent?: number;\n        includingYIndexes?: number[];\n        possibleYMinDecreasingPercent?: number;\n    } = {},\n) => {\n    let chartDataCutted = { ...chartData };\n\n    if (options.xMinPercent != null || options.xMaxPercent != null) {\n        chartDataCutted = {\n            ...chartData,\n            columns: chartData.columns.map(col =>\n                cutColumn(col, options.xMinPercent, options.xMaxPercent),\n            ),\n        };\n    }\n\n    if (options.includingYIndexes) {\n        const xKey = Object.keys(chartDataCutted.types).find(key => {\n            const value = chartDataCutted.types[key];\n            return value === 'x';\n        });\n        const yColumns = chartDataCutted.columns.filter(\n            ([key]) => key !== xKey,\n        );\n        const yColumnsFiltered = yColumns.filter((_, index) =>\n            options.includingYIndexes.includes(index),\n        );\n        const xColumn = chartDataCutted.columns.find(([key]) => key === xKey);\n\n        chartDataCutted = {\n            ...chartDataCutted,\n            columns: [xColumn, ...yColumnsFiltered],\n            names: {\n                ...chartDataCutted.names,\n            },\n            types: {\n                ...chartDataCutted.types,\n            },\n            colors: {\n                ...chartDataCutted.colors,\n            },\n        };\n\n        const ids = yColumns.map(([id]) => id);\n        const includingIds = yColumnsFiltered.map(([id]) => id);\n        const excludingIds = ids.filter(id => !includingIds.includes(id));\n\n        excludingIds.forEach(id => {\n            delete chartDataCutted.names[id];\n            delete chartDataCutted.types[id];\n            delete chartDataCutted.colors[id];\n        });\n    }\n\n    const pointsByKey = mapPointsByKeys(chartDataCutted.columns);\n\n    const extremums = calcExtremums(\n        chartDataCutted.columns,\n        chartDataCutted.types,\n        options.possibleYMinDecreasingPercent,\n    );\n\n    const pointsByKeyPercentised = percentisePointsByKey(\n        pointsByKey,\n        chartDataCutted.types,\n        extremums,\n    );\n\n    const keys = Object.keys(chartDataCutted.types);\n\n    const xKey = keys\n        .map(key => [key, chartDataCutted.types[key]])\n        .find(([key, value]) => value === 'x')[0];\n\n    const yKeys = keys.filter(key => key !== xKey);\n\n    const getFinalDataByKey = (key: string) => {\n        return {\n            pointsPercentised: pointsByKeyPercentised[key],\n            pointsOriginal: pointsByKey[key],\n            name: chartDataCutted.names[key],\n            color: chartDataCutted.colors[key],\n        };\n    };\n\n    return {\n        xColumn: getFinalDataByKey(xKey),\n        yColumns: yKeys.map(getFinalDataByKey),\n        extremums,\n    } as ChartRenderData;\n};\n\nconst unpercentise = (params: {\n    percent: number;\n    min: number;\n    max: number;\n    isY: boolean;\n}) => {\n    const percent = params.isY ? 100 - params.percent : params.percent;\n    const range = params.max - params.min;\n    const valueInRange = (percent / 100) * range;\n    return valueInRange + params.min;\n};\n\nexport const ChartDataUtils = {\n    mapPointsByKeys,\n    mapPointsByType,\n    percentisePoints,\n    percentisePointsByKey,\n    calcExtremums,\n    transformDataToRender,\n    unpercentise,\n};\n","const throttle = <T extends Function>(handler: T, timeout: number) => {\n    let eventTimeout: number;\n    return (...args: any[]) => {\n        if (!eventTimeout) {\n            eventTimeout = window.setTimeout(() => {\n                eventTimeout = null;\n                handler(...args);\n            }, timeout);\n        }\n    };\n};\n\ntype GrabHandlerResult = { xOffset: number; yOffset: number };\nexport type GrabHandler = (result: GrabHandlerResult) => void;\nconst addGrabListener = ({\n    element,\n    onGrabStart = () => {},\n    onGrab = () => {},\n    onGrabEnd,\n}: {\n    element: HTMLElement;\n    onGrabStart?: () => void;\n    onGrab: GrabHandler;\n    onGrabEnd?: () => void;\n}) => {\n    let isDown = false;\n\n    let initialX = 0;\n    let initialY = 0;\n    element.addEventListener('pointerdown', event => {\n        isDown = true;\n        initialX = event.x;\n        initialY = event.y;\n        onGrabStart();\n    });\n\n    document.addEventListener('pointermove', event => {\n        if (isDown) {\n            onGrab({\n                xOffset: event.x - initialX,\n                yOffset: event.y - initialY,\n            });\n        }\n    });\n\n    // if set on element it is not triggered when pointer out of element\n    document.addEventListener('pointerup', event => {\n        if (isDown) {\n            onGrabEnd();\n        }\n        isDown = false;\n    });\n};\n\nexport const EventUtils = {\n    throttle,\n    addGrabListener,\n};\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\ntype RenderParams = {\n    x: number;\n    y: number;\n    color: string;\n    svg: SVGSVGElement;\n    aspectRatio: number;\n    isVisible: boolean;\n    mode: ColorMode;\n    self?: SVGCircleElement;\n};\nconst render = ({\n    svg,\n    color,\n    x,\n    y,\n    aspectRatio,\n    isVisible,\n    mode,\n    self,\n}: RenderParams) => {\n    let circle = self;\n    if (!circle) {\n        circle = document.createElementNS(\n            'http://www.w3.org/2000/svg',\n            'circle',\n        );\n        svg.appendChild(circle);\n    }\n\n    if (isVisible) {\n        const xProportionated = x * aspectRatio;\n\n        const sizes = StyleUtils.getSizesInPercents(\n            svg.clientWidth,\n            aspectRatio,\n        );\n        const colors = StyleUtils.getColors({ mode });\n\n        circle.setAttribute('cx', String(xProportionated));\n        circle.setAttribute('cy', String(y));\n        circle.setAttribute('r', String(sizes.pointerCircleRadius));\n        circle.setAttribute('stroke', color);\n        circle.setAttribute('stroke-width', String(sizes.lineBold));\n        circle.setAttribute('fill', colors.background);\n        DomUtils.setElementStyle(circle, { display: '' });\n    } else {\n        DomUtils.setElementStyle(circle, { display: 'none' });\n    }\n\n    return circle;\n};\n\nexport const Circle = ComponentUtils.create(render);\n\nexport type CircleInstance = ReturnType<typeof Circle.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\ntype RenderParams = {\n    x: number;\n    svg: SVGSVGElement;\n    aspectRatio: number;\n    isVisible: boolean;\n    mode: ColorMode;\n    self?: SVGLineElement;\n};\nconst render = ({\n    svg,\n    x,\n    mode,\n    aspectRatio,\n    isVisible,\n    self,\n}: RenderParams) => {\n    let line = self;\n    if (!line) {\n        line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        svg.appendChild(line);\n    }\n    if (isVisible) {\n        const xProportionated = x * aspectRatio;\n\n        const sizes = StyleUtils.getSizesInPercents(svg.clientWidth);\n        const colors = StyleUtils.getColors({ mode });\n\n        line.setAttribute('x1', String(xProportionated));\n        line.setAttribute('x2', String(xProportionated));\n        line.setAttribute('y1', '0');\n        line.setAttribute('y2', '100');\n        line.setAttribute(\n            'style',\n            `stroke:${colors.ruler};stroke-width:${sizes.lineThin}`,\n        );\n\n        DomUtils.setElementStyle(line, { display: '' });\n    } else {\n        DomUtils.setElementStyle(line, { display: 'none' });\n    }\n    return line;\n};\n\nexport const Ruler = ComponentUtils.create(render);\n\nexport type RulerInstance = ReturnType<typeof Ruler.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ChartRenderData } from 'src/utils/ChartDataUtils/ChartData.types';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\nconst renderDescriptionHtml = (value: number, name: string) =>\n    `<div style=\"font-weight: bold;\">${value}</div><div style=\"margin-top: 2px; font-size: 10px\">${name}</div>`;\n\nconst updateDescriptionEl = (\n    el: HTMLElement,\n    index: number,\n    chartData: ChartRenderData,\n    yValuesOriginal: number[],\n) => {\n    const yCol = chartData.yColumns[index];\n    if (yCol) {\n        DomUtils.setElementStyle(\n            el,\n            {\n                color: yCol.color,\n                paddingLeft: index === 0 ? '0' : '5px',\n            },\n            { replaceWholeStyleObject: true },\n        );\n        // eslint-disable-next-line no-param-reassign\n        el.innerHTML = renderDescriptionHtml(yValuesOriginal[index], yCol.name);\n    } else {\n        DomUtils.setElementStyle(el, {\n            display: 'none',\n        });\n    }\n};\n\nconst updateElements = (params: RenderParams) => {\n    const {\n        self,\n        isVisible,\n        container,\n        x,\n        aspectRatio,\n        mode,\n        chartData,\n        yValuesOriginal,\n        header,\n    } = params;\n    if (isVisible) {\n        const width = self.rootEl.offsetWidth;\n        const containerWidth = container.offsetWidth;\n        const halfWidth = width / 2;\n        const pixelsInPercent = containerWidth / (100 * aspectRatio);\n        const xProportionated = x * aspectRatio;\n        const xPx = xProportionated * pixelsInPercent;\n\n        const leftSideX = xPx - halfWidth;\n\n        let missingLeft = 0;\n        if (leftSideX < 0) {\n            missingLeft = leftSideX;\n        }\n        const rightSideX = leftSideX + width;\n        const needStickToRight = rightSideX > containerWidth;\n\n        const colors = StyleUtils.getColors({ mode });\n        DomUtils.setElementStyle(self.rootEl, {\n            padding: '5px 10px',\n            position: 'absolute',\n            right: needStickToRight ? '0' : 'auto',\n            left: needStickToRight ? 'auto' : `${leftSideX - missingLeft}px`,\n            backgroundColor: colors.background,\n            boxShadow: '0px 0px 3px 1px rgba(0, 0, 0, 0.1)',\n            borderRadius: '5px',\n            top: '0',\n            color: colors.text,\n        });\n\n        self.headerEl.innerText = header;\n\n        self.descriptionEls.forEach((el, index) =>\n            updateDescriptionEl(el, index, chartData, yValuesOriginal),\n        );\n\n        DomUtils.setElementStyle(self.rootEl, { display: '' });\n    } else {\n        DomUtils.setElementStyle(self.rootEl, { display: 'none' });\n    }\n};\n\ntype Self = {\n    rootEl: HTMLElement;\n    headerEl: HTMLElement;\n    descriptionsWrapper: HTMLElement;\n    descriptionEls: HTMLElement[];\n};\n\ntype RenderParams = {\n    x: number;\n    container: HTMLElement;\n    aspectRatio: number;\n    chartData: ChartRenderData;\n    header: string;\n    yValuesOriginal: number[];\n    isVisible: boolean;\n    mode: ColorMode;\n    self?: Self;\n};\n\nconst render = (params: RenderParams) => {\n    const { container, chartData } = params;\n\n    let instance = params.self;\n    if (!instance) {\n        const rootEl = document.createElement('div');\n        DomUtils.setElementStyle(rootEl, {\n            minWidth: '80px',\n            fontSize: '13px',\n            boxSizing: 'border-box',\n            pointerEvents: 'none',\n        });\n        container.appendChild(rootEl);\n\n        const headerEl = document.createElement('div');\n        DomUtils.setElementStyle(headerEl, {\n            flexBasis: '100%',\n        });\n        rootEl.appendChild(headerEl);\n\n        const descriptionsWrapper = document.createElement('div');\n        DomUtils.setElementStyle(descriptionsWrapper, {\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            marginTop: '10px',\n        });\n        rootEl.appendChild(descriptionsWrapper);\n\n        const descriptionEls = chartData.yColumns.map(col => {\n            const el = document.createElement('div');\n            descriptionsWrapper.appendChild(el);\n\n            return el;\n        });\n\n        instance = {\n            rootEl,\n            headerEl,\n            descriptionsWrapper,\n            descriptionEls,\n        };\n    }\n\n    updateElements({\n        ...params,\n        self: instance,\n    });\n\n    return instance;\n};\n\nexport const Caption = ComponentUtils.create(render);\n\nexport type CaptionInstance = ReturnType<typeof Caption.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { Circle, CircleInstance } from 'src/components/MousePointer/_Circle';\nimport { ChartRenderData } from 'src/utils/ChartDataUtils/ChartData.types';\nimport { Ruler, RulerInstance } from 'src/components/MousePointer/_Ruler';\nimport { Caption, CaptionInstance } from 'src/components/MousePointer/_Caption';\nimport { ChartDataUtils } from 'src/utils/ChartDataUtils/ChartDataUtils';\nimport { MathUtils } from 'src/utils/MathUtils/MathUtils';\nimport { ColorMode } from 'src/utils/StyleUtils';\n\nconst getDateFormatted = (timestamp: number) => {\n    const date = new Date(timestamp);\n    const dateStr = date.toString();\n    const [weekDay, mon, day] = dateStr.split(' ');\n    return `${weekDay}, ${mon} ${day}`;\n};\n\ntype Instance = {\n    circles: CircleInstance[];\n    ruler: RulerInstance;\n    caption: CaptionInstance;\n};\n\ntype RenderParams = {\n    xPercent: number;\n    chartData: ChartRenderData;\n    container: HTMLElement;\n    svg: SVGSVGElement;\n    aspectRatio: number;\n    mode: ColorMode;\n    isVisible: boolean;\n    self?: Instance;\n};\nconst render = ({\n    svg,\n    container,\n    chartData,\n    xPercent,\n    aspectRatio,\n    mode,\n    isVisible,\n    self,\n}: RenderParams) => {\n    const xPoint = MathUtils.getNearestPoint(\n        chartData.xColumn.pointsPercentised,\n        xPercent,\n    );\n\n    const xOriginal = ChartDataUtils.unpercentise({\n        min: chartData.extremums.xMin,\n        max: chartData.extremums.xMax,\n        percent: xPercent,\n        isY: false,\n    });\n\n    const xIndex = chartData.xColumn.pointsPercentised.indexOf(xPoint);\n\n    const yValuesPercentised = chartData.yColumns.map(\n        col => col.pointsPercentised[xIndex],\n    );\n    const yValuesOriginal = chartData.yColumns.map(\n        col => col.pointsOriginal[xIndex],\n    );\n\n    let instance = self;\n    if (!instance) {\n        const ruler = Ruler.render({\n            x: xPoint,\n            aspectRatio,\n            svg,\n            isVisible,\n            mode,\n        });\n\n        const circles = chartData.yColumns.map((yColumn, index) => {\n            yValuesPercentised.push();\n            return Circle.render({\n                aspectRatio,\n                x: xPoint,\n                y: yValuesPercentised[index],\n                color: yColumn.color,\n                svg,\n                isVisible,\n                mode,\n            });\n        });\n\n        const caption = Caption.render({\n            x: xPoint,\n            aspectRatio,\n            container,\n            mode,\n            chartData,\n            header: getDateFormatted(xOriginal),\n            yValuesOriginal,\n            isVisible,\n        });\n        instance = {\n            circles,\n            ruler,\n            caption,\n        };\n    } else {\n        instance.circles.forEach((circle, index) => {\n            const col = chartData.yColumns[index];\n            if (col) {\n                circle.reRender({\n                    x: xPoint,\n                    aspectRatio,\n                    y: yValuesPercentised[index],\n                    isVisible,\n                    mode,\n                    color: col.color,\n                });\n            } else {\n                circle.reRender({ isVisible: false });\n            }\n        });\n        instance.ruler.reRender({\n            aspectRatio,\n            x: xPoint,\n            isVisible,\n            mode,\n        });\n        instance.caption.reRender({\n            aspectRatio,\n            x: xPoint,\n            header: getDateFormatted(xOriginal),\n            yValuesOriginal,\n            chartData,\n            mode,\n            container,\n            isVisible,\n        });\n    }\n\n    return instance;\n};\n\nexport const MousePointer = ComponentUtils.create(render);\nexport type MousePointerInstance = ReturnType<typeof MousePointer.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\ntype Self = {\n    line: SVGLineElement;\n    text: HTMLElement;\n};\n\ntype RenderParams = {\n    yOriginal: number;\n    yPercentised: number;\n    svg: SVGSVGElement;\n    aspectRatio: number;\n    mode: ColorMode;\n    isZeroScale: boolean;\n    isHidden: boolean;\n    self?: Self;\n};\n\nconst render = ({\n    svg,\n    aspectRatio,\n    yOriginal,\n    yPercentised,\n    mode,\n    isZeroScale,\n    isHidden,\n    self,\n}: RenderParams) => {\n    let instance = self;\n    if (!instance) {\n        const line = document.createElementNS(\n            'http://www.w3.org/2000/svg',\n            'line',\n        );\n\n        const text = document.createElement('div');\n        svg.appendChild(line);\n        svg.parentElement.appendChild(text);\n\n        instance = {\n            line,\n            text,\n        };\n    }\n\n    if (yPercentised > 100) {\n        // eslint-disable-next-line no-param-reassign\n        yPercentised = 100;\n    }\n\n    const sizes = StyleUtils.getSizesInPercents(svg.clientWidth, aspectRatio);\n    const colors = StyleUtils.getColors({ mode });\n\n    const lineColor = isZeroScale ? colors.ruler : colors.horizontalScale;\n\n    instance.line.setAttribute('x1', '0');\n    instance.line.setAttribute('y1', String(yPercentised));\n    instance.line.setAttribute('x2', String(100 * aspectRatio));\n    instance.line.setAttribute('y2', String(yPercentised));\n    instance.line.setAttribute(\n        'style',\n        `stroke:${lineColor};stroke-width:${sizes.lineThin}`,\n    );\n    DomUtils.setElementStyle(instance.line, {\n        transition: `${StyleUtils.TIMINGS_S.common}s`,\n        opacity: isHidden ? '0' : '1',\n    });\n\n    const textPaddingPx = 5;\n    const pxInPercent = svg.clientWidth / (100 * aspectRatio);\n    const textPadding = textPaddingPx / pxInPercent;\n\n    DomUtils.setElementStyle(instance.text, {\n        position: 'absolute',\n        bottom: `${100 - yPercentised + +textPadding}%`,\n        left: '0',\n        fontSize: `${StyleUtils.SIZES_PX.scaleText}px`,\n        color: colors.gridText,\n        pointerEvents: 'none',\n        transition: `${StyleUtils.TIMINGS_S.common}s`,\n        opacity: isHidden ? '0' : '1',\n    });\n\n    instance.text.innerText = String(yOriginal);\n\n    return instance;\n};\n\nconst remove = (self: Self) => {\n    const { text, line } = self;\n    text.parentElement.removeChild(text);\n    line.parentElement.removeChild(line);\n};\n\nexport const YScale = ComponentUtils.create(render, remove);\n\nexport type YScaleInstance = ReturnType<typeof YScale.render>;\n","import { ChartRenderData } from 'src/utils/ChartDataUtils/ChartData.types';\nimport { MathUtils } from 'src/utils/MathUtils/MathUtils';\nimport { YScale, YScaleInstance } from 'src/components/Grid/_YScale';\nimport { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { ChartDataUtils } from 'src/utils/ChartDataUtils/ChartDataUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\nconst xContainerPaddingLeftPx = 5;\n\nconst renderXScales = (\n    { chartData, mode, svg }: RenderParams,\n    container: HTMLElement,\n    selfs: HTMLElement[] = [],\n) => {\n    const colors = StyleUtils.getColors({ mode });\n    const { xColumn } = chartData;\n\n    const widthPx = 70;\n    const containerWidth = container.clientWidth - xContainerPaddingLeftPx * 2;\n    const pixelsInPercent = containerWidth / 100;\n    const widthPercent = widthPx / pixelsInPercent;\n\n    const pointsNumber = xColumn.pointsOriginal.length - 1;\n\n    const minPointsPerStep = (pointsNumber * widthPercent) / 100;\n    const steps = MathUtils.divideToEqualParts({\n        number: pointsNumber,\n        minPart: minPointsPerStep,\n    });\n\n    const extraElements = selfs.slice(steps.length, Infinity);\n    extraElements.forEach(el => el.parentElement.removeChild(el));\n\n    return steps.map((xIndex, index) => {\n        let self = selfs[index];\n        if (!self) {\n            self = document.createElement('div');\n        }\n\n        const xOriginal = xColumn.pointsOriginal[xIndex];\n\n        self.innerText = new Date(xOriginal)\n            .toString()\n            .split(' ')\n            .slice(1, 3)\n            .join(' ');\n\n        DomUtils.setElementStyle(self, {\n            fontSize: '10px',\n            color: colors.gridText,\n        });\n\n        container.appendChild(self);\n\n        return self;\n    });\n};\n\nconst renderYScales = (\n    { mode, svg, chartData, aspectRatio }: RenderParams,\n    selfs: YScaleInstance[] = [],\n) => {\n    const minPartHeight = 60;\n    const height = svg.clientHeight;\n    const parts = Math.floor(height / minPartHeight);\n    const yMarkers = MathUtils.divideToRoundParts({\n        max: chartData.extremums.yMax,\n        min: chartData.extremums.yMin,\n        parts,\n    });\n\n    const yMarkersPercentised = ChartDataUtils.percentisePoints({\n        isY: true,\n        points: yMarkers,\n        min: chartData.extremums.yMin,\n        max: chartData.extremums.yMax,\n    });\n\n    const rerenderedScales = yMarkers\n        .slice(0, yMarkers.length - 1)\n        .map((yOriginal, index) => {\n            let self = selfs[index];\n            const params = {\n                svg,\n                aspectRatio,\n                yOriginal,\n                yPercentised: yMarkersPercentised[index],\n                isZeroScale: index === 0,\n                mode,\n                isHidden: false,\n            };\n            if (!self) {\n                self = YScale.render(params);\n            } else {\n                self.reRender(params);\n            }\n            return self;\n        });\n\n    selfs.forEach((scale, index) => {\n        if (!rerenderedScales[index]) {\n            rerenderedScales.push(selfs[index]);\n            selfs[index].reRender({\n                isHidden: true,\n            });\n        }\n    });\n\n    return rerenderedScales;\n};\n\ntype Instance = {\n    xScalesContainer: HTMLElement;\n    yScales: YScaleInstance[];\n    xScales: HTMLElement[];\n};\n\ntype RenderParams = {\n    chartData: ChartRenderData;\n    svg: SVGSVGElement;\n    container: HTMLElement;\n    aspectRatio: number;\n    mode: ColorMode;\n    self?: Instance;\n};\nconst render = (params: RenderParams) => {\n    let instance = params.self;\n    if (!instance) {\n        const xScalesContainer = document.createElement('div');\n        DomUtils.setElementStyle(xScalesContainer, {\n            width: '100%',\n            padding: `${xContainerPaddingLeftPx}px`,\n            display: 'flex',\n            boxSizing: 'border-box',\n            justifyContent: 'space-between',\n        });\n\n        params.container.appendChild(xScalesContainer);\n\n        instance = {\n            xScalesContainer,\n            // @ts-ignore\n            xScales: renderXScales(params, xScalesContainer),\n            yScales: renderYScales(params),\n        };\n    } else {\n        instance.yScales = renderYScales(params, instance.yScales);\n        instance.xScales = renderXScales(\n            params,\n            instance.xScalesContainer,\n            instance.xScales,\n        );\n    }\n\n    return instance;\n};\n\nexport const Grid = ComponentUtils.create(render);\n\nexport type GridInstance = ReturnType<typeof Grid.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\nimport { EventUtils, GrabHandler } from 'src/utils/EventUtils';\n\nconst borderWidthPx = 5;\nconst rangerMinWidth = 10;\n\nconst handleGrabStart = (cursor: string) => {\n    DomUtils.setCursorGlobally(cursor);\n    DomUtils.setUserSelectDisabled(true);\n};\n\nconst handleGrab = (\n    xOffset: number,\n    renderParams: Required<RenderParams>,\n    options: { x1Resize?: boolean; x2Resize?: boolean } = {},\n\n    // Function is long but cant't be easily divided to small separate functions.\n    // in this case dividing will lead to more complexity because of\n    // context losing & requirement of much same arguments in such functions.\n    // eslint-disable-next-line sonarjs/cognitive-complexity\n) => {\n    const direction: 'left' | 'right' = xOffset < 0 ? 'left' : 'right';\n\n    const { self, container } = renderParams;\n    const { x1Initial, x2Initial } = self;\n    const pxInPercent = container.clientWidth / 100;\n    const offsetPercent = xOffset / pxInPercent;\n\n    let newX1 = x1Initial + offsetPercent;\n    let newX2 = x2Initial + offsetPercent;\n\n    if (newX1 <= 0) {\n        newX1 = 0;\n    }\n\n    if (newX2 >= 100) {\n        newX2 = 100;\n    }\n\n    const newWidth = newX2 - newX1;\n    if (options.x1Resize && options.x2Resize) {\n        const initialWidth = self.x2Initial - self.x1Initial;\n        const widthDif = initialWidth - newWidth;\n        if (direction === 'left' && newX1 === 0) {\n            newX2 += widthDif;\n        }\n        if (direction === 'right' && newX2 === 100) {\n            newX1 -= widthDif;\n        }\n    } else {\n        const minWidthLacking = rangerMinWidth - newWidth;\n        if (minWidthLacking > 0) {\n            if (newX1 === 0) {\n                newX2 += minWidthLacking;\n            }\n            if (newX2 === 100) {\n                newX1 -= minWidthLacking;\n            }\n        }\n    }\n\n    if (self.x1 !== newX1 || self.x2 !== newX2) {\n        if (options.x1Resize) {\n            self.x1 = newX1;\n        }\n        if (options.x2Resize) {\n            self.x2 = newX2;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        render({\n            ...renderParams,\n            self,\n        });\n\n        renderParams.onChange(self.x1, self.x2);\n    }\n};\n\nconst handleGrabEnd = (renderParams: Required<RenderParams>) => {\n    DomUtils.setCursorGlobally('');\n    DomUtils.setUserSelectDisabled(false);\n\n    const { self } = renderParams;\n    self.x1Initial = self.x1;\n    self.x2Initial = self.x2;\n};\n\ntype MainPartParams = {\n    leftPercent: number | string;\n    rightPercent: number | string;\n    mode: ColorMode;\n    self: HTMLElement;\n};\nconst updateRangerEl = ({\n    leftPercent,\n    rightPercent,\n    mode,\n    self,\n}: MainPartParams) => {\n    const colors = StyleUtils.getColors({ mode });\n    const borderLeftStyle = `5px solid ${colors.rangerBorder}`;\n    const borderTopStyle = `1px solid ${colors.rangerBorder}`;\n\n    DomUtils.setElementStyle(self, {\n        position: 'absolute',\n        left: `${leftPercent}%`,\n        right: `${rightPercent}%`,\n        top: '0',\n        bottom: '0',\n        borderLeft: borderLeftStyle,\n        borderRight: borderLeftStyle,\n        borderTop: borderTopStyle,\n        borderBottom: borderTopStyle,\n        cursor: 'grab',\n        touchAction: 'none',\n    });\n};\n\nconst updateBorderEl = ({\n    leftPercent,\n    rightPercent,\n    self,\n}: MainPartParams) => {\n    const left = leftPercent === 'auto' ? leftPercent : `${leftPercent}%`;\n    const right = rightPercent === 'auto' ? rightPercent : `${rightPercent}%`;\n    DomUtils.setElementStyle(self, {\n        position: 'absolute',\n        left,\n        right,\n        top: '0',\n        bottom: '0',\n        width: `${borderWidthPx}px`,\n        cursor: 'ew-resize',\n        touchAction: 'none',\n    });\n};\n\nconst updateOverlayEl = ({\n    leftPercent,\n    rightPercent,\n    self,\n    mode,\n}: MainPartParams) => {\n    const colors = StyleUtils.getColors({ mode });\n    DomUtils.setElementStyle(self, {\n        position: 'absolute',\n        left: `${leftPercent}%`,\n        right: `${rightPercent}%`,\n        top: '0',\n        bottom: '0',\n        backgroundColor: colors.rangerOverlay,\n    });\n};\n\ntype Self = {\n    rangerEl: HTMLElement;\n    borders: HTMLElement[];\n    overlays: HTMLElement[];\n    x1: number;\n    x2: number;\n    x1Initial: number;\n    x2Initial: number;\n};\n\nexport type ChangeHandler = (x1: number, x2: number) => void;\n\ntype RenderParams = {\n    container: HTMLElement;\n    self?: Self;\n    onChange: ChangeHandler;\n    initialX1: number;\n    initialX2: number;\n    mode: ColorMode;\n};\n\nconst render = (params: RenderParams) => {\n    const { self, container, initialX1, initialX2 } = params;\n\n    let instance = self;\n    if (!instance) {\n        const rangerEl = document.createElement('div');\n        container.appendChild(rangerEl);\n\n        const x1 = initialX1;\n        const x2 = initialX2;\n\n        const borders = [x1, x2].map(() => {\n            const border = document.createElement('div');\n            container.appendChild(border);\n            return border;\n        });\n\n        const overlays = [x1, x2].map(() => {\n            const overlay = document.createElement('div');\n            container.appendChild(overlay);\n            return overlay;\n        });\n\n        instance = {\n            rangerEl,\n            borders,\n            overlays,\n            x1,\n            x2,\n            x1Initial: x1,\n            x2Initial: x2,\n        };\n\n        const paramsWithInstance = {\n            ...params,\n            self: instance,\n        };\n\n        EventUtils.addGrabListener({\n            element: rangerEl,\n            onGrabStart: () => handleGrabStart('grab'),\n            onGrab: EventUtils.throttle<GrabHandler>(\n                ({ xOffset }) =>\n                    handleGrab(xOffset, paramsWithInstance, {\n                        x1Resize: true,\n                        x2Resize: true,\n                    }),\n                11,\n            ),\n            onGrabEnd: () => handleGrabEnd(paramsWithInstance),\n        });\n\n        borders.forEach((borderEl, index) => {\n            EventUtils.addGrabListener({\n                element: borderEl,\n                onGrabStart: () => handleGrabStart('ew-resize'),\n                onGrab: EventUtils.throttle<GrabHandler>(\n                    ({ xOffset }) =>\n                        handleGrab(xOffset, paramsWithInstance, {\n                            x1Resize: index === 0,\n                            x2Resize: index === 1,\n                        }),\n                    11,\n                ),\n                onGrabEnd: () => handleGrabEnd(paramsWithInstance),\n            });\n        });\n    }\n\n    const { mode } = params;\n\n    const leftPercent = instance.x1;\n    const rightPercent = 100 - instance.x2;\n\n    updateRangerEl({\n        self: instance.rangerEl,\n        leftPercent,\n        rightPercent,\n        mode,\n    });\n\n    instance.borders.forEach((borderEl, index) => {\n        updateBorderEl({\n            self: borderEl,\n            leftPercent: index === 0 ? leftPercent : 'auto',\n            rightPercent: index === 1 ? rightPercent : 'auto',\n            mode,\n        });\n    });\n\n    updateOverlayEl({\n        self: instance.overlays[0],\n        leftPercent: 0,\n        rightPercent: 100 - instance.x1,\n        mode,\n    });\n\n    updateOverlayEl({\n        self: instance.overlays[1],\n        leftPercent: instance.x2,\n        rightPercent: 0,\n        mode,\n    });\n\n    return instance;\n};\n\nexport const SelectionOverlay = ComponentUtils.create(render);\n\nexport type SelectionOverlayInstance = ReturnType<\n    typeof SelectionOverlay.render\n>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { ChartRenderData } from 'src/utils/ChartDataUtils/ChartData.types';\nimport { PolyLine, PolyLineInstance } from 'src/components/PolyLine/PolyLine';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport {\n    ChangeHandler,\n    SelectionOverlay,\n    SelectionOverlayInstance,\n} from 'src/components/RangeSelector/_SelectionOverlay';\nimport { ColorMode } from 'src/utils/StyleUtils';\n\ntype Self = {\n    svg: SVGSVGElement;\n    polyLines: PolyLineInstance[];\n    selectionOverlay: SelectionOverlayInstance;\n};\n\ntype RenderParams = {\n    chartData: ChartRenderData;\n    container: HTMLElement;\n    onChange: ChangeHandler;\n    initialX1: number;\n    initialX2: number;\n    mode: ColorMode;\n    self?: Self;\n};\n\nconst render = ({\n    container,\n    initialX1,\n    initialX2,\n    onChange,\n    chartData,\n    mode,\n    self,\n}: RenderParams) => {\n    const aspectRatio = DomUtils.getAspectRatio(container);\n\n    const polyLinesData = chartData.yColumns.map(yCol => ({\n        aspectRatio,\n        color: yCol.color,\n        xPointsInPercents: chartData.xColumn.pointsPercentised,\n        yPointsInPercents: yCol.pointsPercentised,\n        isThin: true,\n    }));\n\n    let instance = self;\n    if (!instance) {\n        const svg = DomUtils.createSvgElement<SVGSVGElement>('svg');\n        container.appendChild(svg);\n\n        const polyLines = polyLinesData.map(data =>\n            PolyLine.render({\n                svg,\n                ...data,\n            }),\n        );\n\n        const selectionOverlay = SelectionOverlay.render({\n            container,\n            onChange,\n            initialX1,\n            initialX2,\n            mode,\n        });\n\n        instance = {\n            polyLines,\n            svg,\n            selectionOverlay,\n        };\n    } else {\n        const extraPolyLines = instance.polyLines.slice(\n            polyLinesData.length,\n            Infinity,\n        );\n        extraPolyLines.forEach(polyLine => polyLine.remove());\n\n        instance.polyLines = polyLinesData.map((data, index) => {\n            const polyLine = instance.polyLines[index];\n            polyLine.reRender(data);\n            return polyLine;\n        });\n\n        instance.selectionOverlay.reRender({\n            container,\n            mode,\n        });\n    }\n\n    instance.svg.setAttribute('viewBox', `0 0 ${100 * aspectRatio} 100`);\n\n    return instance;\n};\n\nexport const RangeSelector = ComponentUtils.create(render);\nexport type RangeSelectorInstance = ReturnType<typeof RangeSelector.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\nconst checkMarkHtml = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\"><path fill=\"#fff\" d=\"M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z\"/></svg>`;\n\ntype Instance = {\n    root: HTMLElement;\n    checkbox: HTMLElement;\n    text: HTMLElement;\n};\n\ntype RenderParams = {\n    text: string;\n    isChecked: boolean;\n    container: HTMLElement;\n    mode: ColorMode;\n    color: string;\n    onClick: () => void;\n    self?: Instance;\n};\nconst render = ({\n    container,\n    isChecked,\n    mode,\n    text,\n    color,\n    onClick,\n    self,\n}: RenderParams) => {\n    let instance = self;\n    if (!instance) {\n        const root = document.createElement('div');\n        container.appendChild(root);\n\n        root.addEventListener('click', onClick);\n\n        const checkbox = document.createElement('div');\n        root.appendChild(checkbox);\n\n        checkbox.innerHTML = checkMarkHtml;\n\n        const textEl = document.createElement('div');\n        root.appendChild(textEl);\n\n        instance = {\n            root,\n            checkbox,\n            text: textEl,\n        };\n    }\n\n    const colors = StyleUtils.getColors({ mode });\n\n    DomUtils.setElementStyle(instance.root, {\n        border: `${StyleUtils.SIZES_PX.lineThin}px solid ${\n            colors.switchBorder\n        }`,\n        borderRadius: '50px',\n        padding: '5px 10px',\n        display: 'flex',\n        alignItems: 'center',\n        marginRight: '20px',\n        cursor: 'pointer',\n    });\n\n    DomUtils.setElementStyle(instance.checkbox, {\n        border: `${StyleUtils.SIZES_PX.lineThin}px solid ${color}`,\n        backgroundColor: isChecked ? color : colors.background,\n        borderRadius: '50px',\n        width: '20px',\n        height: '20px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginRight: '12px',\n    });\n\n    const checkMark = instance.checkbox.children[0] as SVGElement;\n    DomUtils.setElementStyle(checkMark, {\n        opacity: isChecked ? '1' : '0',\n    });\n\n    DomUtils.setElementStyle(instance.text, {\n        color: colors.text,\n        fontSize: `${StyleUtils.SIZES_PX.switchText}px`,\n    });\n\n    instance.text.innerText = text;\n\n    return instance;\n};\n\nexport const SwitchButton = ComponentUtils.create(render);\n\nexport type SwitchButtonInstance = ReturnType<typeof SwitchButton.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { ColorMode } from 'src/utils/StyleUtils';\nimport {\n    SwitchButton,\n    SwitchButtonInstance,\n} from 'src/components/ColSwitch/_SwitchButton';\nimport { ChartRenderData } from 'src/utils/ChartDataUtils/ChartData.types';\n\nconst handleClick = (index: number, params: RenderParams) => {\n    const { self } = params;\n    const isChecked = self.checkedIndexes.includes(index);\n    if (isChecked) {\n        if (self.checkedIndexes.length > 1) {\n            self.checkedIndexes = self.checkedIndexes.filter(i => i !== index);\n        }\n    } else {\n        self.checkedIndexes.push(index);\n    }\n\n    const params2 = { ...params, mode: self.mode };\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    render(params2);\n\n    params.onChange(self.checkedIndexes);\n};\n\ntype Instance = {\n    buttons: SwitchButtonInstance[];\n    checkedIndexes: number[];\n    mode: ColorMode;\n};\n\ntype RenderParams = {\n    chartData: ChartRenderData;\n    container: HTMLElement;\n    mode: ColorMode;\n    onChange: (checkedIndexes: number[]) => void;\n    self?: Instance;\n};\nconst render = (renderParams: RenderParams) => {\n    const { chartData, container, mode, self } = renderParams;\n\n    let instance = self;\n    if (!instance) {\n        const checkedIndexes = chartData.yColumns.map((_, index) => index);\n\n        const clickHandlerWrapper = { handleClick: (index: number) => {} };\n        const buttons = chartData.yColumns.map((col, index) => {\n            return SwitchButton.render({\n                container,\n                color: col.color,\n                isChecked: true,\n                mode,\n                text: col.name,\n                onClick: () => clickHandlerWrapper.handleClick(index),\n            });\n        });\n\n        instance = {\n            buttons,\n            checkedIndexes,\n            mode,\n        };\n\n        clickHandlerWrapper.handleClick = (index: number) =>\n            handleClick(index, { ...renderParams, self: instance });\n    } else {\n        instance.mode = mode;\n        instance.buttons.forEach((button, index) =>\n            button.reRender({\n                isChecked: instance.checkedIndexes.includes(index),\n                mode,\n            }),\n        );\n    }\n\n    return instance;\n};\n\nexport const ColSwitch = ComponentUtils.create(render);\n\nexport type ColSwitchInstance = ReturnType<typeof ColSwitch.render>;\n","import { PolyLine, PolyLineInstance } from 'src/components/PolyLine/PolyLine';\nimport { ChartDataUtils } from 'src/utils/ChartDataUtils/ChartDataUtils';\nimport {\n    ChartData,\n    ChartRenderData,\n} from 'src/utils/ChartDataUtils/ChartData.types';\nimport { EventUtils } from 'src/utils/EventUtils';\nimport {\n    MousePointer,\n    MousePointerInstance,\n} from 'src/components/MousePointer/MousePointer';\nimport { Grid, GridInstance } from 'src/components/Grid/Grid';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ComponentUtils } from 'src/utils/ComponentUtils';\nimport {\n    RangeSelector,\n    RangeSelectorInstance,\n} from 'src/components/RangeSelector/RangeSelector';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\nimport {\n    ColSwitch,\n    ColSwitchInstance,\n} from 'src/components/ColSwitch/ColSwitch';\n\nconst possibleYMinDecreasingPercent = 20;\n\ntype InitialDataType = {\n    rangeXMinPercent: number;\n    rangeXMaxPercent: number;\n};\nconst InitialData: InitialDataType = {\n    rangeXMinPercent: 70,\n    rangeXMaxPercent: 100,\n};\n\nconst renderDom = (container: HTMLElement, mode: ColorMode) => {\n    const colors = StyleUtils.getColors({ mode });\n    const mainContainer = document.createElement('div');\n    DomUtils.setElementStyle(mainContainer, {\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n    });\n\n    const headerContainer = document.createElement('div');\n    DomUtils.setElementStyle(headerContainer, {\n        padding: '15px 5px',\n        fontSize: '16px',\n        lineHeight: '1.2',\n        fontWeight: 'bold',\n        color: colors.text,\n    });\n    headerContainer.innerText = '(No header)';\n\n    const svgContainer = document.createElement('div');\n    DomUtils.setElementStyle(svgContainer, {\n        flex: '1 1 auto',\n        position: 'relative',\n        display: 'flex',\n    });\n\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    DomUtils.setElementStyle(svg, {\n        width: '100%',\n        height: '100%',\n    });\n\n    const xScaleContainer = document.createElement('div');\n    DomUtils.setElementStyle(xScaleContainer, {\n        flex: '0 0 auto',\n        height: '30px',\n    });\n\n    const rangeSelectorContainer = document.createElement('div');\n    DomUtils.setElementStyle(rangeSelectorContainer, {\n        flex: '0 0 auto',\n        height: '60px',\n        position: 'relative',\n        display: 'flex',\n        flexDirection: 'column',\n    });\n\n    const switchContainer = document.createElement('div');\n    DomUtils.setElementStyle(switchContainer, {\n        flex: '0 0 auto',\n        padding: '20px 0',\n        position: 'relative',\n        display: 'flex',\n    });\n\n    container.appendChild(mainContainer);\n    mainContainer.appendChild(headerContainer);\n    mainContainer.appendChild(svgContainer);\n    mainContainer.appendChild(xScaleContainer);\n    mainContainer.appendChild(rangeSelectorContainer);\n    mainContainer.appendChild(switchContainer);\n    svgContainer.appendChild(svg);\n\n    return {\n        svg,\n        mainContainer,\n        headerContainer,\n        xScaleContainer,\n        rangeSelectorContainer,\n        switchContainer,\n        svgContainer,\n    };\n};\n\nconst handleMouseMove = (event: MouseEvent, params: Required<Params>) => {\n    const { self } = params;\n    const { svg, currentPointerX, mousePointer } = self;\n    const {\n        // top, height,\n        left,\n        width,\n    } = svg.getBoundingClientRect();\n    const mouseX = event.clientX;\n    // const mouseY = event.clientY;\n\n    const mouseRelX = mouseX - left;\n    // const mouseRelY = mouseY - top;\n\n    const mousePercentX = (mouseRelX / width) * 100;\n    // const mousePercentY = (mouseRelY / height) * 100;\n\n    if (mousePercentX !== currentPointerX) {\n        self.currentPointerX = mousePercentX;\n\n        mousePointer.reRender({\n            isVisible: true,\n            xPercent: mousePercentX,\n            aspectRatio: DomUtils.getAspectRatio(svg),\n        });\n    }\n};\n\nconst handleMouseLeave = (event: MouseEvent, params: Required<Params>) => {\n    const { self } = params;\n    const { mousePointer } = self;\n    mousePointer.reRender({ isVisible: false });\n};\n\nconst handleResize = (params: Required<Params>) => {\n    const { self } = params;\n    const { svg } = self;\n\n    self.aspectRatio = DomUtils.getAspectRatio(svg);\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    render({ ...params, mode: self.mode });\n};\n\nconst handleRangeSelectionChange = (\n    xMinPercent: number,\n    xMaxPercent: number,\n    params: Required<Params>,\n) => {\n    const { self } = params;\n\n    self.xMinPercent = xMinPercent;\n    self.xMaxPercent = xMaxPercent;\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    render({ ...params, mode: self.mode });\n};\n\nconst handleCheckedIndexesChange = (\n    indexes: number[],\n    params: Required<Params>,\n) => {\n    const { self } = params;\n    self.checkedIndexes = indexes;\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    render({ ...params, mode: self.mode });\n};\n\nconst reRender = (params: Params) => {\n    const { self, mode } = params;\n    const {\n        svg,\n        grid,\n        polyLines,\n        mousePointer,\n        aspectRatio,\n        rangeSelector,\n        colSwitch,\n        headerContainer,\n    } = self;\n    const colors = StyleUtils.getColors({ mode });\n\n    DomUtils.setElementStyle(headerContainer, { color: colors.text });\n\n    svg.setAttribute('viewBox', `0 0 ${100 * aspectRatio} 100`);\n\n    const chartData = ChartDataUtils.transformDataToRender(params.data, {\n        xMinPercent: self.xMinPercent,\n        xMaxPercent: self.xMaxPercent,\n        includingYIndexes: self.checkedIndexes,\n        possibleYMinDecreasingPercent,\n    });\n\n    self.chartData = chartData;\n\n    grid.reRender({ chartData, aspectRatio, mode });\n\n    polyLines.forEach((polyLine, index) => {\n        const yCol = chartData.yColumns[index];\n        if (yCol) {\n            polyLine.reRender({\n                xPointsInPercents: chartData.xColumn.pointsPercentised,\n                yPointsInPercents: yCol.pointsPercentised,\n                aspectRatio,\n                color: yCol.color,\n                isHidden: false,\n            });\n        } else {\n            polyLine.reRender({\n                isHidden: true,\n                color: 'black',\n            });\n        }\n    });\n\n    mousePointer.reRender({ chartData, aspectRatio, mode });\n\n    rangeSelector.reRender({\n        mode,\n    });\n\n    colSwitch.reRender({ mode });\n};\n\ntype Instance = {\n    grid: GridInstance;\n    polyLines: PolyLineInstance[];\n    mousePointer: MousePointerInstance;\n    mainContainer: HTMLElement;\n    headerContainer: HTMLElement;\n    xScaleContainer: HTMLElement;\n    rangeSelectorContainer: HTMLElement;\n    rangeSelector: RangeSelectorInstance;\n    switchContainer: HTMLElement;\n    svgContainer: HTMLElement;\n    svg: SVGSVGElement;\n    chartData: ChartRenderData;\n    currentPointerX: number;\n    checkedIndexes: number[];\n    xMinPercent: number;\n    xMaxPercent: number;\n    aspectRatio: number;\n    colSwitch: ColSwitchInstance;\n    mode: ColorMode;\n};\n\ntype Params = {\n    container: HTMLElement;\n    data: ChartData;\n    mode: ColorMode;\n    self?: Instance;\n};\n\nconst render = (params: Params) => {\n    const { container, data, self } = params;\n\n    let instance = self;\n    if (!instance) {\n        const {\n            svgContainer,\n            xScaleContainer,\n            mainContainer,\n            headerContainer,\n            rangeSelectorContainer,\n            switchContainer,\n            svg,\n        } = renderDom(container, params.mode);\n\n        const chartDataUncut = ChartDataUtils.transformDataToRender(data);\n        const checkedIndexes = chartDataUncut.yColumns.map((y, index) => index);\n\n        const checkedIndexesChangeHandlerWrapper = {\n            onChage: (indexes: number[]) => {},\n        };\n        const colSwitch = ColSwitch.render({\n            mode: params.mode,\n            container: switchContainer,\n            chartData: chartDataUncut,\n            onChange: indexes =>\n                checkedIndexesChangeHandlerWrapper.onChage(indexes),\n        });\n\n        const aspectRatio = DomUtils.getAspectRatio(svg);\n\n        svg.setAttribute('viewBox', `0 0 ${100 * aspectRatio} 100`);\n\n        const chartData = ChartDataUtils.transformDataToRender(data, {\n            xMinPercent: InitialData.rangeXMinPercent,\n            xMaxPercent: InitialData.rangeXMaxPercent,\n            possibleYMinDecreasingPercent,\n        });\n\n        const grid = Grid.render({\n            svg,\n            aspectRatio,\n            mode: params.mode,\n            container: xScaleContainer,\n            chartData,\n        });\n\n        const { xColumn, yColumns } = chartData;\n\n        const xPointsPercentised = xColumn.pointsPercentised;\n\n        const polyLines = yColumns.map(column => {\n            return PolyLine.render({\n                svg,\n                color: column.color,\n                xPointsInPercents: xPointsPercentised,\n                yPointsInPercents: column.pointsPercentised,\n                aspectRatio,\n            });\n        });\n\n        const currentPointerX = 0;\n        const mousePointer = MousePointer.render({\n            container: svgContainer,\n            svg,\n            xPercent: currentPointerX,\n            aspectRatio,\n            chartData,\n            mode: params.mode,\n            isVisible: false,\n        });\n\n        const rangeSelectorChangeHandlerWrapper = {\n            onChange: (x1: number, x2: number) => {},\n        };\n        const rangeSelector = RangeSelector.render({\n            chartData: chartDataUncut,\n            container: rangeSelectorContainer,\n            onChange: (x1, x2) =>\n                rangeSelectorChangeHandlerWrapper.onChange(x1, x2),\n            initialX1: InitialData.rangeXMinPercent,\n            initialX2: InitialData.rangeXMaxPercent,\n            mode: params.mode,\n        });\n\n        instance = {\n            headerContainer,\n            svgContainer,\n            xScaleContainer,\n            mainContainer,\n            rangeSelectorContainer,\n            switchContainer,\n            svg,\n            polyLines,\n            grid,\n            mousePointer,\n            colSwitch,\n            rangeSelector,\n            currentPointerX,\n            chartData,\n            checkedIndexes,\n            xMinPercent: InitialData.rangeXMinPercent,\n            xMaxPercent: InitialData.rangeXMaxPercent,\n            aspectRatio,\n            mode: params.mode,\n        };\n\n        checkedIndexesChangeHandlerWrapper.onChage = (indexes: number[]) =>\n            handleCheckedIndexesChange(indexes, { ...params, self: instance });\n\n        rangeSelectorChangeHandlerWrapper.onChange = (x1: number, x2: number) =>\n            handleRangeSelectionChange(x1, x2, { ...params, self: instance });\n\n        svg.addEventListener('mousemove', event =>\n            handleMouseMove(event, {\n                ...params,\n                self: instance,\n            }),\n        );\n        svg.addEventListener('mouseleave', event =>\n            handleMouseLeave(event, {\n                ...params,\n                self: instance,\n            }),\n        );\n\n        window.addEventListener(\n            'resize',\n            EventUtils.throttle(\n                () => handleResize({ ...params, self: instance }),\n                66,\n            ),\n            false,\n        );\n    } else {\n        instance.mode = params.mode;\n        reRender(params);\n    }\n\n    return instance;\n};\n\nexport const Chart = ComponentUtils.create(render);\n\nexport type ChartInstance = ReturnType<typeof Chart.render>;\n","import { Chart } from 'src/components/Chart/Chart';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { StyleUtils } from 'src/utils/StyleUtils';\nimport { ChartData } from 'src/utils/ChartDataUtils/ChartData.types';\nimport chartDataUrl from 'src/assets/chartData.json';\n\nconst loadChartData = () => {\n    return fetch((chartDataUrl as any) as string).then(\n        (data: any) => data.json() as ChartData[],\n    );\n};\n\nloadChartData().then(chartData => {\n    const allChartsContainer = document.getElementsByClassName(\n        'chartWrapper',\n    )[0] as HTMLDivElement;\n\n    const charts = chartData.map(data => {\n        const container = document.createElement('div');\n        DomUtils.setElementStyle(container, {\n            width: '100%',\n            height: 'calc(100vh - 40px)',\n            boxSizing: 'border-box',\n            padding: '0 15px',\n        });\n\n        allChartsContainer.appendChild(container);\n\n        return Chart.render({\n            container,\n            data,\n            mode: 'day',\n        });\n    });\n\n    const footer = document.getElementsByClassName('footer')[0] as HTMLElement;\n    allChartsContainer.appendChild(footer);\n\n    const dayNightSwitch = document.getElementsByClassName(\n        'dayNightSwitch',\n    )[0] as HTMLElement;\n\n    const textsByMode = {\n        day: 'Switch to Night Mode',\n        night: 'Switch to Day Mode',\n    };\n    let currentMode: keyof typeof textsByMode = 'day';\n    DomUtils.setElementStyle(dayNightSwitch, {\n        fontSize: '16px',\n        color: '#1F8DE0',\n    });\n\n    dayNightSwitch.addEventListener('click', () => {\n        currentMode = currentMode === 'day' ? 'night' : 'day';\n        dayNightSwitch.innerText = textsByMode[currentMode];\n        charts.forEach(chart => chart.reRender({ mode: currentMode }));\n        const colors = StyleUtils.getColors({ mode: currentMode });\n        DomUtils.setElementStyle(footer, {\n            backgroundColor: colors.background,\n        });\n        DomUtils.setElementStyle(document.body, {\n            backgroundColor: colors.background,\n        });\n    });\n});\n"],"sourceRoot":""}