{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/assets/chartData.json","webpack:///./src/utils/ObjectUtils.ts","webpack:///./src/utils/ComponentUtils.ts","webpack:///./src/utils/StyleUtils.ts","webpack:///./src/utils/DomUtils.ts","webpack:///./src/components/PolyLine/PolyLine.ts","webpack:///./src/utils/ArrayUtils/ArrayUtils.ts","webpack:///./src/utils/MathUtils/MathUtils.ts","webpack:///./src/utils/ChartDataUtils/ChartDataUtils.ts","webpack:///./src/utils/EventUtils.ts","webpack:///./src/components/MousePointer/_Circle.ts","webpack:///./src/components/MousePointer/_Ruler.ts","webpack:///./src/components/MousePointer/_Caption.ts","webpack:///./src/components/MousePointer/MousePointer.ts","webpack:///./src/components/Grid/_YScale.ts","webpack:///./src/components/Grid/Grid.ts","webpack:///./src/components/RangeSelector/_SelectionOverlay.ts","webpack:///./src/components/RangeSelector/RangeSelector.ts","webpack:///./src/components/ColSwitch/_SwitchButton.ts","webpack:///./src/components/ColSwitch/ColSwitch.ts","webpack:///./src/components/Chart/Chart.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ObjectUtils","func","obj","objs","keys","map","keyOfO","_defineProperty","assign","apply","concat","_toConsumableArray","forEach","ComponentUtils","render","remove","renderParams","self","reRender","partialParams","arguments","length","undefined","fullParams","_objectSpread","SIZES_PX","lineThin","lineBold","pointerCircleRadius","scaleText","switchText","COLORS_BY_MODE","day","ruler","horizontalScale","text","gridText","background","switchBorder","rangerOverlay","rangerBorder","night","StyleUtils","common","fast","width","pxInPercent","sizePx","_ref","setElementStyle","element","style","replaceWholeStyleObject","setAttribute","setGlobalStyle","document","body","DomUtils","createElementNS","containerEl","clientWidth","clientHeight","type","cursor","isDisabled","userSelect","msUserSelect","webkitUserSelect","msTouchSelect","PolyLine","xPointsInPercents","yPointsInPercents","color","svg","aspectRatio","_ref$isThin","isThin","isHidden","pathData","linesCoordinates","x","index","y","join","calcPathData","path","transition","appendChild","sizesInPercent","strokeWidth","String","opacity","parentElement","removeChild","getIndexByPercent","arr","percent","Error","Math","round","ArrayUtils","min","max","indexMin","indexMax","slice","getBoundingPointsIndexes","points","point","indexOfPrev","filter","indexOfNext","findIndex","getIsNumBeauty","num","lastZeroes","numRest","MathUtils","_getTwoBoundingPoints","_getBoundingPointsInd2","prevPoint","nextPoint","getTwoBoundingPoints","_ref3","_ref3$min","parts","range","rawDivider","rawPartStr","zeroesStr","pow","divider","Number","resultDivisions","result","nextStep","push","_ref4","number","minPart","target","floor","part","stepsNumber","ceil","steps","minValue","currentValue","prevValue","zeroesAdded","Infinity","mapPointsByKeys","columns","objects","_ref2","_toArray","ChartDataUtils_defineProperty","ChartDataUtils_toConsumableArray","mapPointsByType","types","line","data","_data","percentisePoints","isY","_ref4$min","_ref4$max","step","percentized","percentisePointsByKey","pointsByKey","_ref5","xMax","xMin","yMax","yMin","isX","calcExtremums","possibleYMinDecreasingPercent","pointsByType","ChartDataUtils","chartData","options","chartDataCutted","ChartDataUtils_objectSpread","xMinPercent","xMaxPercent","col","_ref6","_ref7","slicedPoints","includingYIndexes","xKey","find","yColumns","_ref8","_slicedToArray","yColumnsFiltered","_","includes","xColumn","_ref10","names","colors","ids","_ref12","includingIds","_ref14","id","extremums","pointsByKeyPercentised","_ref16","_ref17","yKeys","getFinalDataByKey","pointsPercentised","pointsOriginal","params","EventUtils","handler","timeout","eventTimeout","_len","args","Array","_key","window","setTimeout","_ref$onGrabStart","onGrabStart","_ref$onGrab","onGrab","onGrabEnd","isDown","initialX","initialY","addEventListener","event","xOffset","yOffset","Circle","isVisible","circle","xProportionated","sizes","display","Ruler","updateElements","container","yValuesOriginal","header","rootEl","offsetWidth","containerWidth","leftSideX","missingLeft","needStickToRight","padding","position","right","left","backgroundColor","boxShadow","borderRadius","top","headerEl","innerText","descriptionEls","el","yCol","paddingLeft","innerHTML","updateDescriptionEl","Caption","instance","createElement","minWidth","fontSize","boxSizing","pointerEvents","flexBasis","descriptionsWrapper","flexWrap","justifyContent","marginTop","_Caption_objectSpread","getDateFormatted","timestamp","_dateStr$split2","MousePointer_slicedToArray","Date","toString","split","weekDay","mon","MousePointer","xPercent","xPoint","xOriginal","xIndex","indexOf","yValuesPercentised","circles","caption","yColumn","YScale","yOriginal","yPercentised","isZeroScale","lineColor","textPadding","bottom","renderXScales","selfs","widthPercent","xContainerPaddingLeftPx","pointsNumber","renderYScales","height","yMarkers","yMarkersPercentised","rerenderedScales","scale","Grid","yScales","xScales","xScalesContainer","handleGrabStart","handleGrab","direction","x1Initial","x2Initial","offsetPercent","newX1","newX2","newWidth","x1Resize","x2Resize","widthDif","minWidthLacking","x1","x2","_SelectionOverlay_objectSpread","onChange","handleGrabEnd","updateOverlayEl","leftPercent","rightPercent","initialX1","initialX2","rangerEl","borders","border","paramsWithInstance","overlays","overlay","borderEl","borderLeftStyle","borderTopStyle","borderLeft","borderRight","borderTop","borderBottom","touchAction","updateRangerEl","updateBorderEl","SelectionOverlay","RangeSelector","polyLinesData","polyLines","polyLine","selectionOverlay","RangeSelector_objectSpread","SwitchButton","isChecked","onClick","root","checkbox","textEl","alignItems","marginRight","checkMark","children","buttons","button","checkedIndexes","clickHandlerWrapper","handleClick","params2","ColSwitch_objectSpread","ColSwitch","InitialData","grid","mousePointer","rangeSelector","colSwitch","headerContainer","_renderDom","mainContainer","flexDirection","lineHeight","fontWeight","svgContainer","flex","xScaleContainer","rangeSelectorContainer","switchContainer","renderDom","chartDataUncut","checkedIndexesChangeHandlerWrapper","onChage","indexes","xPointsPercentised","column","rangeSelectorChangeHandlerWrapper","currentPointerX","Chart_objectSpread","handleCheckedIndexesChange","handleRangeSelectionChange","_svg$getBoundingClien","getBoundingClientRect","mousePercentX","clientX","handleMouseMove","handleMouseLeave","handleResize","Chart","fetch","chartDataUrl","then","json","allChartsContainer","getElementsByClassName","charts","footer","dayNightSwitch","textsByMode","currentMode","chart"],"mappings":"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","file":"main.c68539a86020d1b5b4c3.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __webpack_public_path__ + \"07668984a136df2dcb7b1f086c6ffad9.json\";","const map = <O extends {}, R>(\n    func: (value: O[keyof O], key: keyof O, obj: O) => R,\n    obj: O,\n) => {\n    const objs = Object.keys(obj).map(key => {\n        const keyOfO: keyof O = key as keyof O;\n        const value = obj[keyOfO];\n        return { [key]: func(value, keyOfO, obj) };\n    });\n\n    // TODO: think, how to return right type if func returns not type of obj[key]\n    return Object.assign({}, ...objs) as O;\n};\n\nconst forEach = <O extends {}>(\n    func: (value: O[keyof O], key: keyof O, obj: O) => void,\n    obj: O,\n) => {\n    Object.keys(obj).forEach(key => {\n        const keyOfO: keyof O = key as keyof O;\n        const value = obj[keyOfO];\n        func(value, keyOfO, obj);\n    });\n};\n\nexport const ObjectUtils = {\n    map,\n    forEach,\n};\n","import { ObjectUtils } from 'src/utils/ObjectUtils';\n\nconst create = <I, RP extends { self?: I }>(\n    render: (params: RP) => I,\n    remove?: (self: I) => void,\n) => {\n    type RenderParams = RP;\n    return {\n        render: (renderParams: RenderParams) => {\n            const self = render(renderParams as RP);\n            return {\n                reRender: (partialParams: Partial<RenderParams> = {}) => {\n                    const fullParams = ObjectUtils.map((value, key) => {\n                        if (\n                            Object.prototype.hasOwnProperty.call(\n                                partialParams,\n                                key,\n                            )\n                        ) {\n                            return partialParams[key];\n                        }\n                        return value;\n                    }, renderParams);\n\n                    // eslint-disable-next-line no-param-reassign\n                    renderParams = {\n                        self,\n                        ...partialParams,\n                        ...renderParams,\n                        ...fullParams,\n                    };\n\n                    render(renderParams);\n                },\n\n                remove: () => remove(self),\n            };\n        },\n    };\n};\n\nexport const ComponentUtils = {\n    create,\n};\n","import { ObjectUtils } from 'src/utils/ObjectUtils';\n\nconst SIZES_PX = {\n    lineThin: 1,\n    lineBold: 3,\n    pointerCircleRadius: 5,\n    scaleText: 10,\n    switchText: 13,\n};\n\nconst COLORS = {\n    ruler: '#DFE6EB',\n    horizontalScale: '#F2F4F5',\n    scaleText: '#96A2AA',\n    text: '#222222',\n    gridText: '#96A2AA',\n    background: '#fff',\n    switchBorder: '#E6ECF0',\n    rangerOverlay: 'rgba(242, 247, 249, 0.75)',\n    rangerBorder: 'rgba(201, 220, 232, 0.5)',\n};\n\nconst COLORS_NIGHT = {\n    background: '#242F3D',\n    ruler: '#3C4A59',\n    horizontalScale: '#293543',\n    text: '#fff',\n    gridText: '#556777',\n    switchBorder: '#354657',\n    rangerOverlay: 'rgba(31, 42, 55, 0.75)',\n    rangerBorder: 'rgba(65, 86, 106, 0.5)',\n\n    scaleText: '#556777',\n};\n\nconst COLORS_BY_MODE = {\n    day: COLORS,\n    night: COLORS_NIGHT,\n};\n\nconst TIMINGS_S = {\n    common: 0.3,\n    fast: 0.1,\n};\n\nexport type ColorMode = 'day' | 'night';\n\nconst getColors = ({ mode }: { mode: ColorMode }) => {\n    return COLORS_BY_MODE[mode];\n};\n\nconst getSizesInPercents = (width: number, aspectRatio: number = 1) => {\n    const pxInPercent = width / (100 * aspectRatio);\n\n    return ObjectUtils.map(sizePx => sizePx / pxInPercent, SIZES_PX);\n};\n\nexport const StyleUtils = {\n    SIZES_PX,\n    TIMINGS_S,\n    getSizesInPercents,\n    getColors,\n};\n","import { ObjectUtils } from 'src/utils/ObjectUtils';\nimport { Omit } from 'src/utils/Types';\n\ntype StyleSetterOptions = {\n    replaceWholeStyleObject?: boolean;\n};\ntype PartialCSSStyleDeclaration = Omit<\n    Partial<CSSStyleDeclaration>,\n    'length' | 'parentRule'\n>;\nconst setElementStyle = (\n    element: HTMLElement | SVGElement,\n    style: PartialCSSStyleDeclaration,\n    options: StyleSetterOptions = {},\n) => {\n    if (options.replaceWholeStyleObject) {\n        element.setAttribute('style', '');\n    }\n\n    ObjectUtils.forEach((value, key) => {\n        // eslint-disable-next-line no-param-reassign\n        element.style[key] = value;\n    }, style);\n};\n\nconst createSvgElement = <T extends SVGElement>(name: string) => {\n    return document.createElementNS('http://www.w3.org/2000/svg', name) as T;\n};\n\nconst getAspectRatio = (containerEl: Element) => {\n    const containerWidth = containerEl.clientWidth;\n    const containerHeight = containerEl.clientHeight;\n\n    return containerWidth / containerHeight;\n};\n\nconst setGlobalStyle = (style: PartialCSSStyleDeclaration) => {\n    setElementStyle(document.body, style);\n};\n\nconst setCursorGlobally = (type: string) => {\n    setGlobalStyle({\n        cursor: type,\n    });\n};\nconst setUserSelectDisabled = (isDisabled: boolean) => {\n    const value = isDisabled ? 'none' : '';\n\n    setGlobalStyle({\n        userSelect: value,\n        msUserSelect: value,\n        webkitUserSelect: value,\n        msTouchSelect: value,\n    });\n};\n\nexport const DomUtils = {\n    setElementStyle,\n    setGlobalStyle,\n    createSvgElement,\n    getAspectRatio,\n    setCursorGlobally,\n    setUserSelectDisabled,\n};\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { StyleUtils } from 'src/utils/StyleUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\n\nconst calcPathData = (\n    xPointsInPercents: number[],\n    yPointsInPercents: number[],\n    aspectRatio: number,\n) => {\n    const xPointsProportionated = xPointsInPercents.map(x => x * aspectRatio);\n    const linesCoordinates = xPointsProportionated.map((x, index) => {\n        const y = yPointsInPercents[index];\n\n        return `${x} ${y}`;\n    });\n    return `M ${linesCoordinates.join(' L ')}`;\n};\n\ntype RenderParams = {\n    xPointsInPercents: number[];\n    yPointsInPercents: number[];\n    color: string;\n    svg: SVGSVGElement;\n    aspectRatio: number;\n    isThin?: boolean;\n    isHidden?: boolean;\n    self?: SVGPathElement;\n};\n\nconst render = ({\n    xPointsInPercents,\n    yPointsInPercents,\n    color,\n    svg,\n    aspectRatio,\n    isThin = false,\n    self,\n    isHidden,\n}: RenderParams) => {\n    const pathData = calcPathData(\n        xPointsInPercents,\n        yPointsInPercents,\n        aspectRatio,\n    );\n\n    let path = self;\n    if (!path) {\n        path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        DomUtils.setElementStyle(path, {\n            transition: `${StyleUtils.TIMINGS_S.common}s`,\n        });\n        svg.appendChild(path);\n    }\n\n    const sizesInPercent = StyleUtils.getSizesInPercents(\n        svg.clientWidth,\n        aspectRatio,\n    );\n    const strokeWidth = isThin\n        ? sizesInPercent.lineThin\n        : sizesInPercent.lineBold;\n\n    path.setAttribute('stroke', color);\n    path.setAttribute('stroke-width', String(strokeWidth));\n    path.setAttribute('fill', 'none');\n    path.setAttribute('d', pathData);\n\n    if (isHidden) {\n        DomUtils.setElementStyle(path, { opacity: '0' });\n    } else {\n        DomUtils.setElementStyle(path, { opacity: '1' });\n    }\n\n    return path;\n};\n\nconst remove = (self: SVGPathElement) => {\n    self.parentElement.removeChild(self);\n};\n\nexport const PolyLine = ComponentUtils.create(render, remove);\nexport type PolyLineInstance = ReturnType<typeof PolyLine.render>;\n","const getIndexByPercent = (arr: any[], percent: number) => {\n    if (percent > 100 || percent < 0) {\n        throw new Error(`Provided not valid percent value: ${percent}`);\n    }\n\n    const length = arr.length - 1;\n    return Math.round((length * percent) / 100);\n};\n\nconst sliceByPercent = <T>(arr: T[], min: number, max: number) => {\n    const indexMin = getIndexByPercent(arr, min);\n    const indexMax = getIndexByPercent(arr, max) + 1; // Array.prototype.slice strange feature\n\n    return arr.slice(indexMin, indexMax);\n};\n\nexport const ArrayUtils = {\n    getIndexByPercent,\n    sliceByPercent,\n};\n","type LineYCalculatorParams = {\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n};\nconst getYOfLineCalculator = ({ x1, y1, x2, y2 }: LineYCalculatorParams) => {\n    if (x1 === x2) {\n        return (x: number) => y1;\n    }\n    if (y1 === y2) {\n        return (x: number) => y1;\n    }\n    const k = (y2 - y1) / (x2 - x1);\n    const b = y1 - k * x1;\n    return (x: number) => {\n        return k * x + b;\n    };\n};\n\nconst getBoundingPointsIndexes = (points: number[], point: number) => {\n    const prevPoints = points.filter(p => p <= point);\n    let indexOfPrev = prevPoints.length - 1;\n    if (indexOfPrev === -1) {\n        indexOfPrev = 0;\n    }\n    let indexOfNext = points.findIndex(p => p >= point);\n    if (indexOfNext === -1) {\n        indexOfNext = points.length - 1;\n    }\n\n    return { indexOfPrev, indexOfNext };\n};\n\ntype BoundingPointsGetterParams = {\n    x: number;\n    xPoints: number[];\n    yPoints: number[];\n};\nconst getBoundingPoints = ({\n    x,\n    xPoints,\n    yPoints,\n}: BoundingPointsGetterParams) => {\n    const { indexOfNext, indexOfPrev } = getBoundingPointsIndexes(xPoints, x);\n\n    const y1 = yPoints[indexOfPrev];\n    const y2 = yPoints[indexOfNext];\n\n    const x1 = xPoints[indexOfPrev];\n    const x2 = xPoints[indexOfNext];\n\n    return {\n        x1,\n        x2,\n        y1,\n        y2,\n    };\n};\n\nconst getTwoBoundingPoints = (points: number[], point: number) => {\n    const { indexOfNext, indexOfPrev } = getBoundingPointsIndexes(\n        points,\n        point,\n    );\n    return { prevPoint: points[indexOfPrev], nextPoint: points[indexOfNext] };\n};\n\nconst getNearestPoint = (points: number[], point: number) => {\n    const { nextPoint, prevPoint } = getTwoBoundingPoints(points, point);\n    const prevDif = point - prevPoint;\n    const nextDif = nextPoint - point;\n    if (prevDif < nextDif) {\n        return prevPoint;\n    }\n    return nextPoint;\n};\n\ntype DividerParams = {\n    min?: number;\n    max: number;\n    parts: number;\n};\n\n// now it works somehow\n// TODO: fix to work with large numbers, decimal & negative\nconst divideToRoundParts = ({ max, min = 0, parts }: DividerParams) => {\n    const range = max - min;\n\n    const rawDivider = Math.round(range / parts) || 1;\n\n    const rawPartStr = String(rawDivider);\n\n    const zeroesStr = String(10 ** (rawPartStr.length - 1)).slice(1);\n\n    let divider = Number(rawPartStr.slice(0, 1) + zeroesStr);\n\n    let resultDivisions = range / divider;\n\n    while (resultDivisions > parts) {\n        divider = Number(divider) + Number(1 + zeroesStr);\n        resultDivisions = range / divider;\n    }\n\n    // while (resultDivisions < parts) {\n    //     divider /= 2;\n    //     resultDivisions = range / divider;\n    // }\n\n    // divider = Number(divider) + Number(1 + zeroesStr);\n    // resultDivisions = range / divider;\n    // }\n\n    const result: number[] = [min];\n    while (result[result.length - 1] !== max) {\n        let nextStep = result[result.length - 1] + divider;\n        if (nextStep > max) {\n            nextStep = max;\n        }\n        result.push(nextStep);\n    }\n\n    return result;\n};\n\nconst getIsNumBeauty = (num: number) => {\n    let lastZeroes = '';\n    let numRest = String(num);\n    while (numRest && numRest[numRest.length - 1] === '0') {\n        lastZeroes += '0';\n        numRest = numRest.slice(0, numRest.length - 1);\n    }\n    return lastZeroes.length >= numRest.length;\n};\n\nconst getLowerBeautyValue = (value: number, minValue: number) => {\n    if (minValue <= 0) {\n        return 0;\n    }\n\n    let currentValue = String(value);\n    let prevValue = String(value);\n    let zeroesAdded = 0;\n    while (+currentValue >= minValue) {\n        if (getIsNumBeauty(+currentValue)) {\n            return +currentValue;\n        }\n\n        prevValue = currentValue;\n\n        zeroesAdded++;\n        currentValue =\n            currentValue.slice(0, currentValue.length - zeroesAdded) +\n            String(10 ** zeroesAdded).slice(1, Infinity);\n    }\n\n    return +prevValue;\n};\n\nconst divideToEqualParts = ({\n    number,\n    minPart,\n}: {\n    number: number;\n    minPart: number;\n}) => {\n    const rawDivider = number / minPart;\n    const target = Math.floor(rawDivider);\n    const k = (target * minPart - number) / -target;\n\n    // found k by inserting different values here to get round divider, than solve this equation to get upper formulae\n    const divider = number / (minPart + k);\n\n    const part = number / divider;\n\n    const stepsNumber = Math.ceil(number / minPart);\n\n    const steps = [];\n    for (let i = 0; i < stepsNumber; i++) {\n        steps.push(Math.round(i * part));\n    }\n\n    return steps;\n};\n\n//\n//\n// Used it to calc point on Y by X, but realised pointers should be rendered\n// only on provided x points, not on values between provided points\n//\n//\n// const calcY = (x: number, xPoints: number[], yPoints: number[]) => {\n//     const boundingPoints = MathUtils.getBoundingPoints({ x, xPoints, yPoints });\n//     const yCalculator = MathUtils.getYOfLineCalculator(boundingPoints);\n//\n//     return yCalculator(x);\n// };\n// const yValuesPercentised = chartData.yColumns.map(yColumn =>\n//     calcY(\n//         x,\n//         chartData.xColumn.pointsPercentised,\n//         yColumn.pointsPercentised,\n//     ),\n// );\n// const yValuesOriginal = chartData.yColumns.map(yColumn =>\n//     Math.round(\n//         calcY(\n//             xOriginal,\n//             chartData.xColumn.pointsOriginal,\n//             yColumn.pointsOriginal,\n//         ),\n//     ),\n// );\n\nexport const MathUtils = {\n    getYOfLineCalculator,\n    getBoundingPointsIndexes,\n    getBoundingPoints,\n    getNearestPoint,\n    divideToRoundParts,\n    divideToEqualParts,\n    getIsNumBeauty,\n    getLowerBeautyValue,\n};\n","import { StringKeyMap } from 'src/utils/Types';\nimport { ObjectUtils } from 'src/utils/ObjectUtils';\nimport { ArrayUtils } from 'src/utils/ArrayUtils/ArrayUtils';\nimport { MathUtils } from 'src/utils/MathUtils/MathUtils';\nimport {\n    ChartData,\n    ChartRenderData,\n    ColumnData,\n    ColumnTypes,\n    Extremums,\n} from './ChartData.types';\n\nconst mapPointsByKeys = (columns: ColumnData[]) => {\n    const objects = columns.map(([name, ...points]) => ({\n        [name]: points,\n    }));\n    return Object.assign({}, ...objects) as StringKeyMap<number[]>;\n};\n\nconst mapPointsByType = (columns: ColumnData[], types: ColumnTypes) => {\n    const result: { line: number[]; x: number[] } = { line: [], x: [] };\n    columns.forEach(data => {\n        const [name, ...points] = data;\n        const type = types[name];\n        result[type] = result[type].concat(points);\n    });\n    return result;\n};\n\nconst percentisePoints = ({\n    points,\n    isY,\n    min = Math.min(...points),\n    max = Math.max(...points),\n}: {\n    points: number[];\n    isY?: boolean;\n    min?: number;\n    max?: number;\n}) => {\n    const percents = 100;\n    const step = percents / (max - min);\n\n    const pointsShifted = points.map(point => point - min);\n\n    const percentized = pointsShifted.map(point => point * step);\n    if (isY) {\n        return percentized.map(p => 100 - p);\n    }\n    return percentized;\n};\n\nconst percentisePointsByKey = (\n    pointsByKey: StringKeyMap<number[]>,\n    types: ColumnTypes,\n    { xMax, xMin, yMax, yMin }: Extremums,\n) => {\n    return ObjectUtils.map((value, key) => {\n        const isX = types[key] === 'x';\n        const min = isX ? xMin : yMin;\n        const max = isX ? xMax : yMax;\n        return percentisePoints({\n            points: pointsByKey[key],\n            isY: !isX,\n            min,\n            max,\n        });\n    }, pointsByKey);\n};\n\nconst calcExtremums = (\n    columns: ColumnData[],\n    types: ColumnTypes,\n    possibleYMinDecreasingPercent: number = 0,\n) => {\n    const pointsByType = mapPointsByType(columns, types);\n\n    const xMin = Math.min(...pointsByType.x);\n    const xMax = Math.max(...pointsByType.x);\n    let yMin = Math.min(...pointsByType.line);\n    const yMax = Math.max(...pointsByType.line);\n\n    if (possibleYMinDecreasingPercent) {\n        const range = yMax - yMin;\n        const possibleMin =\n            yMin - (range / 100) * possibleYMinDecreasingPercent;\n        yMin = MathUtils.getLowerBeautyValue(yMin, possibleMin);\n    }\n\n    return {\n        xMin,\n        yMax,\n        xMax,\n        yMin,\n    } as Extremums;\n};\n\nconst cutColumn = ([name, ...points]: ColumnData, min: number, max: number) => {\n    const slicedPoints = ArrayUtils.sliceByPercent(points, min, max);\n    return [name, ...slicedPoints] as ColumnData;\n};\n\nconst transformDataToRender = (\n    chartData: ChartData,\n    options: {\n        xMinPercent?: number;\n        xMaxPercent?: number;\n        includingYIndexes?: number[];\n        possibleYMinDecreasingPercent?: number;\n    } = {},\n) => {\n    let chartDataCutted = { ...chartData };\n\n    if (options.xMinPercent != null || options.xMaxPercent != null) {\n        chartDataCutted = {\n            ...chartData,\n            columns: chartData.columns.map(col =>\n                cutColumn(col, options.xMinPercent, options.xMaxPercent),\n            ),\n        };\n    }\n\n    if (options.includingYIndexes) {\n        const xKey = Object.keys(chartDataCutted.types).find(key => {\n            const value = chartDataCutted.types[key];\n            return value === 'x';\n        });\n        const yColumns = chartDataCutted.columns.filter(\n            ([key]) => key !== xKey,\n        );\n        const yColumnsFiltered = yColumns.filter((_, index) =>\n            options.includingYIndexes.includes(index),\n        );\n        const xColumn = chartDataCutted.columns.find(([key]) => key === xKey);\n\n        chartDataCutted = {\n            ...chartDataCutted,\n            columns: [xColumn, ...yColumnsFiltered],\n            names: {\n                ...chartDataCutted.names,\n            },\n            types: {\n                ...chartDataCutted.types,\n            },\n            colors: {\n                ...chartDataCutted.colors,\n            },\n        };\n\n        const ids = yColumns.map(([id]) => id);\n        const includingIds = yColumnsFiltered.map(([id]) => id);\n        const excludingIds = ids.filter(id => !includingIds.includes(id));\n\n        excludingIds.forEach(id => {\n            delete chartDataCutted.names[id];\n            delete chartDataCutted.types[id];\n            delete chartDataCutted.colors[id];\n        });\n    }\n\n    const pointsByKey = mapPointsByKeys(chartDataCutted.columns);\n\n    const extremums = calcExtremums(\n        chartDataCutted.columns,\n        chartDataCutted.types,\n        options.possibleYMinDecreasingPercent,\n    );\n\n    const pointsByKeyPercentised = percentisePointsByKey(\n        pointsByKey,\n        chartDataCutted.types,\n        extremums,\n    );\n\n    const keys = Object.keys(chartDataCutted.types);\n\n    const xKey = keys\n        .map(key => [key, chartDataCutted.types[key]])\n        .find(([key, value]) => value === 'x')[0];\n\n    const yKeys = keys.filter(key => key !== xKey);\n\n    const getFinalDataByKey = (key: string) => {\n        return {\n            pointsPercentised: pointsByKeyPercentised[key],\n            pointsOriginal: pointsByKey[key],\n            name: chartDataCutted.names[key],\n            color: chartDataCutted.colors[key],\n        };\n    };\n\n    return {\n        xColumn: getFinalDataByKey(xKey),\n        yColumns: yKeys.map(getFinalDataByKey),\n        extremums,\n    } as ChartRenderData;\n};\n\nconst unpercentise = (params: {\n    percent: number;\n    min: number;\n    max: number;\n    isY: boolean;\n}) => {\n    const percent = params.isY ? 100 - params.percent : params.percent;\n    const range = params.max - params.min;\n    const valueInRange = (percent / 100) * range;\n    return valueInRange + params.min;\n};\n\nexport const ChartDataUtils = {\n    mapPointsByKeys,\n    mapPointsByType,\n    percentisePoints,\n    percentisePointsByKey,\n    calcExtremums,\n    transformDataToRender,\n    unpercentise,\n};\n","const throttle = <T extends Function>(handler: T, timeout: number) => {\n    let eventTimeout: number;\n    return (...args: any[]) => {\n        if (!eventTimeout) {\n            eventTimeout = window.setTimeout(() => {\n                eventTimeout = null;\n                handler(...args);\n            }, timeout);\n        }\n    };\n};\n\ntype GrabHandlerResult = { xOffset: number; yOffset: number };\nexport type GrabHandler = (result: GrabHandlerResult) => void;\nconst addGrabListener = ({\n    element,\n    onGrabStart = () => {},\n    onGrab = () => {},\n    onGrabEnd,\n}: {\n    element: HTMLElement;\n    onGrabStart?: () => void;\n    onGrab: GrabHandler;\n    onGrabEnd?: () => void;\n}) => {\n    let isDown = false;\n\n    let initialX = 0;\n    let initialY = 0;\n    element.addEventListener('pointerdown', event => {\n        isDown = true;\n        initialX = event.x;\n        initialY = event.y;\n        onGrabStart();\n    });\n\n    document.addEventListener('pointermove', event => {\n        if (isDown) {\n            onGrab({\n                xOffset: event.x - initialX,\n                yOffset: event.y - initialY,\n            });\n        }\n    });\n\n    // if set on element it is not triggered when pointer out of element\n    document.addEventListener('pointerup', event => {\n        if (isDown) {\n            onGrabEnd();\n        }\n        isDown = false;\n    });\n};\n\nexport const EventUtils = {\n    throttle,\n    addGrabListener,\n};\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\ntype RenderParams = {\n    x: number;\n    y: number;\n    color: string;\n    svg: SVGSVGElement;\n    aspectRatio: number;\n    isVisible: boolean;\n    mode: ColorMode;\n    self?: SVGCircleElement;\n};\nconst render = ({\n    svg,\n    color,\n    x,\n    y,\n    aspectRatio,\n    isVisible,\n    mode,\n    self,\n}: RenderParams) => {\n    let circle = self;\n    if (!circle) {\n        circle = document.createElementNS(\n            'http://www.w3.org/2000/svg',\n            'circle',\n        );\n        svg.appendChild(circle);\n    }\n\n    if (isVisible) {\n        const xProportionated = x * aspectRatio;\n\n        const sizes = StyleUtils.getSizesInPercents(\n            svg.clientWidth,\n            aspectRatio,\n        );\n        const colors = StyleUtils.getColors({ mode });\n\n        circle.setAttribute('cx', String(xProportionated));\n        circle.setAttribute('cy', String(y));\n        circle.setAttribute('r', String(sizes.pointerCircleRadius));\n        circle.setAttribute('stroke', color);\n        circle.setAttribute('stroke-width', String(sizes.lineBold));\n        circle.setAttribute('fill', colors.background);\n        DomUtils.setElementStyle(circle, { display: '' });\n    } else {\n        DomUtils.setElementStyle(circle, { display: 'none' });\n    }\n\n    return circle;\n};\n\nexport const Circle = ComponentUtils.create(render);\n\nexport type CircleInstance = ReturnType<typeof Circle.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\ntype RenderParams = {\n    x: number;\n    svg: SVGSVGElement;\n    aspectRatio: number;\n    isVisible: boolean;\n    mode: ColorMode;\n    self?: SVGLineElement;\n};\nconst render = ({\n    svg,\n    x,\n    mode,\n    aspectRatio,\n    isVisible,\n    self,\n}: RenderParams) => {\n    let line = self;\n    if (!line) {\n        line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        svg.appendChild(line);\n    }\n    if (isVisible) {\n        const xProportionated = x * aspectRatio;\n\n        const sizes = StyleUtils.getSizesInPercents(svg.clientWidth);\n        const colors = StyleUtils.getColors({ mode });\n\n        line.setAttribute('x1', String(xProportionated));\n        line.setAttribute('x2', String(xProportionated));\n        line.setAttribute('y1', '0');\n        line.setAttribute('y2', '100');\n        line.setAttribute(\n            'style',\n            `stroke:${colors.ruler};stroke-width:${sizes.lineThin}`,\n        );\n\n        DomUtils.setElementStyle(line, { display: '' });\n    } else {\n        DomUtils.setElementStyle(line, { display: 'none' });\n    }\n    return line;\n};\n\nexport const Ruler = ComponentUtils.create(render);\n\nexport type RulerInstance = ReturnType<typeof Ruler.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ChartRenderData } from 'src/utils/ChartDataUtils/ChartData.types';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\nconst renderDescriptionHtml = (value: number, name: string) =>\n    `<div style=\"font-weight: bold;\">${value}</div><div style=\"margin-top: 2px; font-size: 10px\">${name}</div>`;\n\nconst updateDescriptionEl = (\n    el: HTMLElement,\n    index: number,\n    chartData: ChartRenderData,\n    yValuesOriginal: number[],\n) => {\n    const yCol = chartData.yColumns[index];\n    if (yCol) {\n        DomUtils.setElementStyle(\n            el,\n            {\n                color: yCol.color,\n                paddingLeft: index === 0 ? '0' : '5px',\n            },\n            { replaceWholeStyleObject: true },\n        );\n        // eslint-disable-next-line no-param-reassign\n        el.innerHTML = renderDescriptionHtml(yValuesOriginal[index], yCol.name);\n    } else {\n        DomUtils.setElementStyle(el, {\n            display: 'none',\n        });\n    }\n};\n\nconst updateElements = (params: RenderParams) => {\n    const {\n        self,\n        isVisible,\n        container,\n        x,\n        aspectRatio,\n        mode,\n        chartData,\n        yValuesOriginal,\n        header,\n    } = params;\n    if (isVisible) {\n        const width = self.rootEl.offsetWidth;\n        const containerWidth = container.offsetWidth;\n        const halfWidth = width / 2;\n        const pixelsInPercent = containerWidth / (100 * aspectRatio);\n        const xProportionated = x * aspectRatio;\n        const xPx = xProportionated * pixelsInPercent;\n\n        const leftSideX = xPx - halfWidth;\n\n        let missingLeft = 0;\n        if (leftSideX < 0) {\n            missingLeft = leftSideX;\n        }\n        const rightSideX = leftSideX + width;\n        const needStickToRight = rightSideX > containerWidth;\n\n        const colors = StyleUtils.getColors({ mode });\n        DomUtils.setElementStyle(self.rootEl, {\n            padding: '5px 10px',\n            position: 'absolute',\n            right: needStickToRight ? '0' : 'auto',\n            left: needStickToRight ? 'auto' : `${leftSideX - missingLeft}px`,\n            backgroundColor: colors.background,\n            boxShadow: '0px 0px 3px 1px rgba(0, 0, 0, 0.1)',\n            borderRadius: '5px',\n            top: '0',\n            color: colors.text,\n        });\n\n        self.headerEl.innerText = header;\n\n        self.descriptionEls.forEach((el, index) =>\n            updateDescriptionEl(el, index, chartData, yValuesOriginal),\n        );\n\n        DomUtils.setElementStyle(self.rootEl, { display: '' });\n    } else {\n        DomUtils.setElementStyle(self.rootEl, { display: 'none' });\n    }\n};\n\ntype Self = {\n    rootEl: HTMLElement;\n    headerEl: HTMLElement;\n    descriptionsWrapper: HTMLElement;\n    descriptionEls: HTMLElement[];\n};\n\ntype RenderParams = {\n    x: number;\n    container: HTMLElement;\n    aspectRatio: number;\n    chartData: ChartRenderData;\n    header: string;\n    yValuesOriginal: number[];\n    isVisible: boolean;\n    mode: ColorMode;\n    self?: Self;\n};\n\nconst render = (params: RenderParams) => {\n    const { container, chartData } = params;\n\n    let instance = params.self;\n    if (!instance) {\n        const rootEl = document.createElement('div');\n        DomUtils.setElementStyle(rootEl, {\n            minWidth: '80px',\n            fontSize: '13px',\n            boxSizing: 'border-box',\n            pointerEvents: 'none',\n        });\n        container.appendChild(rootEl);\n\n        const headerEl = document.createElement('div');\n        DomUtils.setElementStyle(headerEl, {\n            flexBasis: '100%',\n        });\n        rootEl.appendChild(headerEl);\n\n        const descriptionsWrapper = document.createElement('div');\n        DomUtils.setElementStyle(descriptionsWrapper, {\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            marginTop: '10px',\n        });\n        rootEl.appendChild(descriptionsWrapper);\n\n        const descriptionEls = chartData.yColumns.map(col => {\n            const el = document.createElement('div');\n            descriptionsWrapper.appendChild(el);\n\n            return el;\n        });\n\n        instance = {\n            rootEl,\n            headerEl,\n            descriptionsWrapper,\n            descriptionEls,\n        };\n    }\n\n    updateElements({\n        ...params,\n        self: instance,\n    });\n\n    return instance;\n};\n\nexport const Caption = ComponentUtils.create(render);\n\nexport type CaptionInstance = ReturnType<typeof Caption.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { Circle, CircleInstance } from 'src/components/MousePointer/_Circle';\nimport { ChartRenderData } from 'src/utils/ChartDataUtils/ChartData.types';\nimport { Ruler, RulerInstance } from 'src/components/MousePointer/_Ruler';\nimport { Caption, CaptionInstance } from 'src/components/MousePointer/_Caption';\nimport { ChartDataUtils } from 'src/utils/ChartDataUtils/ChartDataUtils';\nimport { MathUtils } from 'src/utils/MathUtils/MathUtils';\nimport { ColorMode } from 'src/utils/StyleUtils';\n\nconst getDateFormatted = (timestamp: number) => {\n    const date = new Date(timestamp);\n    const dateStr = date.toString();\n    const [weekDay, mon, day] = dateStr.split(' ');\n    return `${weekDay}, ${mon} ${day}`;\n};\n\ntype Instance = {\n    circles: CircleInstance[];\n    ruler: RulerInstance;\n    caption: CaptionInstance;\n};\n\ntype RenderParams = {\n    xPercent: number;\n    chartData: ChartRenderData;\n    container: HTMLElement;\n    svg: SVGSVGElement;\n    aspectRatio: number;\n    mode: ColorMode;\n    isVisible: boolean;\n    self?: Instance;\n};\nconst render = ({\n    svg,\n    container,\n    chartData,\n    xPercent,\n    aspectRatio,\n    mode,\n    isVisible,\n    self,\n}: RenderParams) => {\n    const xPoint = MathUtils.getNearestPoint(\n        chartData.xColumn.pointsPercentised,\n        xPercent,\n    );\n\n    const xOriginal = ChartDataUtils.unpercentise({\n        min: chartData.extremums.xMin,\n        max: chartData.extremums.xMax,\n        percent: xPercent,\n        isY: false,\n    });\n\n    const xIndex = chartData.xColumn.pointsPercentised.indexOf(xPoint);\n\n    const yValuesPercentised = chartData.yColumns.map(\n        col => col.pointsPercentised[xIndex],\n    );\n    const yValuesOriginal = chartData.yColumns.map(\n        col => col.pointsOriginal[xIndex],\n    );\n\n    let instance = self;\n    if (!instance) {\n        const ruler = Ruler.render({\n            x: xPoint,\n            aspectRatio,\n            svg,\n            isVisible,\n            mode,\n        });\n\n        const circles = chartData.yColumns.map((yColumn, index) => {\n            yValuesPercentised.push();\n            return Circle.render({\n                aspectRatio,\n                x: xPoint,\n                y: yValuesPercentised[index],\n                color: yColumn.color,\n                svg,\n                isVisible,\n                mode,\n            });\n        });\n\n        const caption = Caption.render({\n            x: xPoint,\n            aspectRatio,\n            container,\n            mode,\n            chartData,\n            header: getDateFormatted(xOriginal),\n            yValuesOriginal,\n            isVisible,\n        });\n        instance = {\n            circles,\n            ruler,\n            caption,\n        };\n    } else {\n        instance.circles.forEach((circle, index) => {\n            const col = chartData.yColumns[index];\n            if (col) {\n                circle.reRender({\n                    x: xPoint,\n                    aspectRatio,\n                    y: yValuesPercentised[index],\n                    isVisible,\n                    mode,\n                    color: col.color,\n                });\n            } else {\n                circle.reRender({ isVisible: false });\n            }\n        });\n        instance.ruler.reRender({\n            aspectRatio,\n            x: xPoint,\n            isVisible,\n            mode,\n        });\n        instance.caption.reRender({\n            aspectRatio,\n            x: xPoint,\n            header: getDateFormatted(xOriginal),\n            yValuesOriginal,\n            chartData,\n            mode,\n            container,\n            isVisible,\n        });\n    }\n\n    return instance;\n};\n\nexport const MousePointer = ComponentUtils.create(render);\nexport type MousePointerInstance = ReturnType<typeof MousePointer.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\ntype Self = {\n    line: SVGLineElement;\n    text: HTMLElement;\n};\n\ntype RenderParams = {\n    yOriginal: number;\n    yPercentised: number;\n    svg: SVGSVGElement;\n    aspectRatio: number;\n    mode: ColorMode;\n    isZeroScale: boolean;\n    isHidden: boolean;\n    self?: Self;\n};\n\nconst render = ({\n    svg,\n    aspectRatio,\n    yOriginal,\n    yPercentised,\n    mode,\n    isZeroScale,\n    isHidden,\n    self,\n}: RenderParams) => {\n    let instance = self;\n    if (!instance) {\n        const line = document.createElementNS(\n            'http://www.w3.org/2000/svg',\n            'line',\n        );\n\n        const text = document.createElement('div');\n        svg.appendChild(line);\n        svg.parentElement.appendChild(text);\n\n        instance = {\n            line,\n            text,\n        };\n    }\n\n    if (yPercentised > 100) {\n        // eslint-disable-next-line no-param-reassign\n        yPercentised = 100;\n    }\n\n    const sizes = StyleUtils.getSizesInPercents(svg.clientWidth, aspectRatio);\n    const colors = StyleUtils.getColors({ mode });\n\n    const lineColor = isZeroScale ? colors.ruler : colors.horizontalScale;\n\n    instance.line.setAttribute('x1', '0');\n    instance.line.setAttribute('y1', String(yPercentised));\n    instance.line.setAttribute('x2', String(100 * aspectRatio));\n    instance.line.setAttribute('y2', String(yPercentised));\n    instance.line.setAttribute(\n        'style',\n        `stroke:${lineColor};stroke-width:${sizes.lineThin}`,\n    );\n    DomUtils.setElementStyle(instance.line, {\n        transition: `${StyleUtils.TIMINGS_S.common}s`,\n        opacity: isHidden ? '0' : '1',\n    });\n\n    const textPaddingPx = 5;\n    const pxInPercent = svg.clientWidth / (100 * aspectRatio);\n    const textPadding = textPaddingPx / pxInPercent;\n\n    DomUtils.setElementStyle(instance.text, {\n        position: 'absolute',\n        bottom: `${100 - yPercentised + +textPadding}%`,\n        left: '0',\n        fontSize: `${StyleUtils.SIZES_PX.scaleText}px`,\n        color: colors.gridText,\n        pointerEvents: 'none',\n        transition: `${StyleUtils.TIMINGS_S.common}s`,\n        opacity: isHidden ? '0' : '1',\n    });\n\n    instance.text.innerText = String(yOriginal);\n\n    return instance;\n};\n\nconst remove = (self: Self) => {\n    const { text, line } = self;\n    text.parentElement.removeChild(text);\n    line.parentElement.removeChild(line);\n};\n\nexport const YScale = ComponentUtils.create(render, remove);\n\nexport type YScaleInstance = ReturnType<typeof YScale.render>;\n","import { ChartRenderData } from 'src/utils/ChartDataUtils/ChartData.types';\nimport { MathUtils } from 'src/utils/MathUtils/MathUtils';\nimport { YScale, YScaleInstance } from 'src/components/Grid/_YScale';\nimport { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { ChartDataUtils } from 'src/utils/ChartDataUtils/ChartDataUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\nconst xContainerPaddingLeftPx = 5;\n\nconst renderXScales = (\n    { chartData, mode, svg }: RenderParams,\n    container: HTMLElement,\n    selfs: HTMLElement[] = [],\n) => {\n    const colors = StyleUtils.getColors({ mode });\n    const { xColumn } = chartData;\n\n    const widthPx = 70;\n    const containerWidth = container.clientWidth - xContainerPaddingLeftPx * 2;\n    const pixelsInPercent = containerWidth / 100;\n    const widthPercent = widthPx / pixelsInPercent;\n\n    const pointsNumber = xColumn.pointsOriginal.length - 1;\n\n    const minPointsPerStep = (pointsNumber * widthPercent) / 100;\n    const steps = MathUtils.divideToEqualParts({\n        number: pointsNumber,\n        minPart: minPointsPerStep,\n    });\n\n    const extraElements = selfs.slice(steps.length, Infinity);\n    extraElements.forEach(el => el.parentElement.removeChild(el));\n\n    return steps.map((xIndex, index) => {\n        let self = selfs[index];\n        if (!self) {\n            self = document.createElement('div');\n        }\n\n        const xOriginal = xColumn.pointsOriginal[xIndex];\n\n        self.innerText = new Date(xOriginal)\n            .toString()\n            .split(' ')\n            .slice(1, 3)\n            .join(' ');\n\n        DomUtils.setElementStyle(self, {\n            fontSize: '10px',\n            color: colors.gridText,\n        });\n\n        container.appendChild(self);\n\n        return self;\n    });\n};\n\nconst renderYScales = (\n    { mode, svg, chartData, aspectRatio }: RenderParams,\n    selfs: YScaleInstance[] = [],\n) => {\n    const minPartHeight = 60;\n    const height = svg.clientHeight;\n    const parts = Math.floor(height / minPartHeight);\n    const yMarkers = MathUtils.divideToRoundParts({\n        max: chartData.extremums.yMax,\n        min: chartData.extremums.yMin,\n        parts,\n    });\n\n    const yMarkersPercentised = ChartDataUtils.percentisePoints({\n        isY: true,\n        points: yMarkers,\n        min: chartData.extremums.yMin,\n        max: chartData.extremums.yMax,\n    });\n\n    const rerenderedScales = yMarkers\n        .slice(0, yMarkers.length - 1)\n        .map((yOriginal, index) => {\n            let self = selfs[index];\n            const params = {\n                svg,\n                aspectRatio,\n                yOriginal,\n                yPercentised: yMarkersPercentised[index],\n                isZeroScale: index === 0,\n                mode,\n                isHidden: false,\n            };\n            if (!self) {\n                self = YScale.render(params);\n            } else {\n                self.reRender(params);\n            }\n            return self;\n        });\n\n    selfs.forEach((scale, index) => {\n        if (!rerenderedScales[index]) {\n            rerenderedScales.push(selfs[index]);\n            selfs[index].reRender({\n                isHidden: true,\n            });\n        }\n    });\n\n    return rerenderedScales;\n};\n\ntype Instance = {\n    xScalesContainer: HTMLElement;\n    yScales: YScaleInstance[];\n    xScales: HTMLElement[];\n};\n\ntype RenderParams = {\n    chartData: ChartRenderData;\n    svg: SVGSVGElement;\n    container: HTMLElement;\n    aspectRatio: number;\n    mode: ColorMode;\n    self?: Instance;\n};\nconst render = (params: RenderParams) => {\n    let instance = params.self;\n    if (!instance) {\n        const xScalesContainer = document.createElement('div');\n        DomUtils.setElementStyle(xScalesContainer, {\n            width: '100%',\n            padding: `${xContainerPaddingLeftPx}px`,\n            display: 'flex',\n            boxSizing: 'border-box',\n            justifyContent: 'space-between',\n        });\n\n        params.container.appendChild(xScalesContainer);\n\n        instance = {\n            xScalesContainer,\n            // @ts-ignore\n            xScales: renderXScales(params, xScalesContainer),\n            yScales: renderYScales(params),\n        };\n    } else {\n        instance.yScales = renderYScales(params, instance.yScales);\n        instance.xScales = renderXScales(\n            params,\n            instance.xScalesContainer,\n            instance.xScales,\n        );\n    }\n\n    return instance;\n};\n\nexport const Grid = ComponentUtils.create(render);\n\nexport type GridInstance = ReturnType<typeof Grid.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\nimport { EventUtils, GrabHandler } from 'src/utils/EventUtils';\n\nconst borderWidthPx = 5;\nconst rangerMinWidth = 10;\n\nconst handleGrabStart = (cursor: string) => {\n    DomUtils.setCursorGlobally(cursor);\n    DomUtils.setUserSelectDisabled(true);\n};\n\nconst handleGrab = (\n    xOffset: number,\n    renderParams: Required<RenderParams>,\n    options: { x1Resize?: boolean; x2Resize?: boolean } = {},\n\n    // Function is long but cant't be easily divided to small separate functions.\n    // in this case dividing will lead to more complexity because of\n    // context losing & requirement of much same arguments in such functions.\n    // eslint-disable-next-line sonarjs/cognitive-complexity\n) => {\n    const direction: 'left' | 'right' = xOffset < 0 ? 'left' : 'right';\n\n    const { self, container } = renderParams;\n    const { x1Initial, x2Initial } = self;\n    const pxInPercent = container.clientWidth / 100;\n    const offsetPercent = xOffset / pxInPercent;\n\n    let newX1 = x1Initial + offsetPercent;\n    let newX2 = x2Initial + offsetPercent;\n\n    if (newX1 <= 0) {\n        newX1 = 0;\n    }\n\n    if (newX2 >= 100) {\n        newX2 = 100;\n    }\n\n    const newWidth = newX2 - newX1;\n    if (options.x1Resize && options.x2Resize) {\n        const initialWidth = self.x2Initial - self.x1Initial;\n        const widthDif = initialWidth - newWidth;\n        if (direction === 'left' && newX1 === 0) {\n            newX2 += widthDif;\n        }\n        if (direction === 'right' && newX2 === 100) {\n            newX1 -= widthDif;\n        }\n    } else {\n        const minWidthLacking = rangerMinWidth - newWidth;\n        if (minWidthLacking > 0) {\n            if (newX1 === 0) {\n                newX2 += minWidthLacking;\n            }\n            if (newX2 === 100) {\n                newX1 -= minWidthLacking;\n            }\n        }\n    }\n\n    if (self.x1 !== newX1 || self.x2 !== newX2) {\n        if (options.x1Resize) {\n            self.x1 = newX1;\n        }\n        if (options.x2Resize) {\n            self.x2 = newX2;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        render({\n            ...renderParams,\n            self,\n        });\n\n        renderParams.onChange(self.x1, self.x2);\n    }\n};\n\nconst handleGrabEnd = (renderParams: Required<RenderParams>) => {\n    DomUtils.setCursorGlobally('');\n    DomUtils.setUserSelectDisabled(false);\n\n    const { self } = renderParams;\n    self.x1Initial = self.x1;\n    self.x2Initial = self.x2;\n};\n\ntype MainPartParams = {\n    leftPercent: number | string;\n    rightPercent: number | string;\n    mode: ColorMode;\n    self: HTMLElement;\n};\nconst updateRangerEl = ({\n    leftPercent,\n    rightPercent,\n    mode,\n    self,\n}: MainPartParams) => {\n    const colors = StyleUtils.getColors({ mode });\n    const borderLeftStyle = `5px solid ${colors.rangerBorder}`;\n    const borderTopStyle = `1px solid ${colors.rangerBorder}`;\n\n    DomUtils.setElementStyle(self, {\n        position: 'absolute',\n        left: `${leftPercent}%`,\n        right: `${rightPercent}%`,\n        top: '0',\n        bottom: '0',\n        borderLeft: borderLeftStyle,\n        borderRight: borderLeftStyle,\n        borderTop: borderTopStyle,\n        borderBottom: borderTopStyle,\n        cursor: 'grab',\n        touchAction: 'none',\n    });\n};\n\nconst updateBorderEl = ({\n    leftPercent,\n    rightPercent,\n    self,\n}: MainPartParams) => {\n    const left = leftPercent === 'auto' ? leftPercent : `${leftPercent}%`;\n    const right = rightPercent === 'auto' ? rightPercent : `${rightPercent}%`;\n    DomUtils.setElementStyle(self, {\n        position: 'absolute',\n        left,\n        right,\n        top: '0',\n        bottom: '0',\n        width: `${borderWidthPx}px`,\n        cursor: 'ew-resize',\n        touchAction: 'none',\n    });\n};\n\nconst updateOverlayEl = ({\n    leftPercent,\n    rightPercent,\n    self,\n    mode,\n}: MainPartParams) => {\n    const colors = StyleUtils.getColors({ mode });\n    DomUtils.setElementStyle(self, {\n        position: 'absolute',\n        left: `${leftPercent}%`,\n        right: `${rightPercent}%`,\n        top: '0',\n        bottom: '0',\n        backgroundColor: colors.rangerOverlay,\n    });\n};\n\ntype Self = {\n    rangerEl: HTMLElement;\n    borders: HTMLElement[];\n    overlays: HTMLElement[];\n    x1: number;\n    x2: number;\n    x1Initial: number;\n    x2Initial: number;\n};\n\nexport type ChangeHandler = (x1: number, x2: number) => void;\n\ntype RenderParams = {\n    container: HTMLElement;\n    self?: Self;\n    onChange: ChangeHandler;\n    initialX1: number;\n    initialX2: number;\n    mode: ColorMode;\n};\n\nconst render = (params: RenderParams) => {\n    const { self, container, initialX1, initialX2 } = params;\n\n    let instance = self;\n    if (!instance) {\n        const rangerEl = document.createElement('div');\n        container.appendChild(rangerEl);\n\n        const x1 = initialX1;\n        const x2 = initialX2;\n\n        const borders = [x1, x2].map(() => {\n            const border = document.createElement('div');\n            container.appendChild(border);\n            return border;\n        });\n\n        const overlays = [x1, x2].map(() => {\n            const overlay = document.createElement('div');\n            container.appendChild(overlay);\n            return overlay;\n        });\n\n        instance = {\n            rangerEl,\n            borders,\n            overlays,\n            x1,\n            x2,\n            x1Initial: x1,\n            x2Initial: x2,\n        };\n\n        const paramsWithInstance = {\n            ...params,\n            self: instance,\n        };\n\n        EventUtils.addGrabListener({\n            element: rangerEl,\n            onGrabStart: () => handleGrabStart('grab'),\n            onGrab: EventUtils.throttle<GrabHandler>(\n                ({ xOffset }) =>\n                    handleGrab(xOffset, paramsWithInstance, {\n                        x1Resize: true,\n                        x2Resize: true,\n                    }),\n                11,\n            ),\n            onGrabEnd: () => handleGrabEnd(paramsWithInstance),\n        });\n\n        borders.forEach((borderEl, index) => {\n            EventUtils.addGrabListener({\n                element: borderEl,\n                onGrabStart: () => handleGrabStart('ew-resize'),\n                onGrab: EventUtils.throttle<GrabHandler>(\n                    ({ xOffset }) =>\n                        handleGrab(xOffset, paramsWithInstance, {\n                            x1Resize: index === 0,\n                            x2Resize: index === 1,\n                        }),\n                    11,\n                ),\n                onGrabEnd: () => handleGrabEnd(paramsWithInstance),\n            });\n        });\n    }\n\n    const { mode } = params;\n\n    const leftPercent = instance.x1;\n    const rightPercent = 100 - instance.x2;\n\n    updateRangerEl({\n        self: instance.rangerEl,\n        leftPercent,\n        rightPercent,\n        mode,\n    });\n\n    instance.borders.forEach((borderEl, index) => {\n        updateBorderEl({\n            self: borderEl,\n            leftPercent: index === 0 ? leftPercent : 'auto',\n            rightPercent: index === 1 ? rightPercent : 'auto',\n            mode,\n        });\n    });\n\n    updateOverlayEl({\n        self: instance.overlays[0],\n        leftPercent: 0,\n        rightPercent: 100 - instance.x1,\n        mode,\n    });\n\n    updateOverlayEl({\n        self: instance.overlays[1],\n        leftPercent: instance.x2,\n        rightPercent: 0,\n        mode,\n    });\n\n    return instance;\n};\n\nexport const SelectionOverlay = ComponentUtils.create(render);\n\nexport type SelectionOverlayInstance = ReturnType<\n    typeof SelectionOverlay.render\n>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { ChartRenderData } from 'src/utils/ChartDataUtils/ChartData.types';\nimport { PolyLine, PolyLineInstance } from 'src/components/PolyLine/PolyLine';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport {\n    ChangeHandler,\n    SelectionOverlay,\n    SelectionOverlayInstance,\n} from 'src/components/RangeSelector/_SelectionOverlay';\nimport { ColorMode } from 'src/utils/StyleUtils';\n\ntype Self = {\n    svg: SVGSVGElement;\n    polyLines: PolyLineInstance[];\n    selectionOverlay: SelectionOverlayInstance;\n};\n\ntype RenderParams = {\n    chartData: ChartRenderData;\n    container: HTMLElement;\n    onChange: ChangeHandler;\n    initialX1: number;\n    initialX2: number;\n    mode: ColorMode;\n    self?: Self;\n};\n\nconst render = ({\n    container,\n    initialX1,\n    initialX2,\n    onChange,\n    chartData,\n    mode,\n    self,\n}: RenderParams) => {\n    const aspectRatio = DomUtils.getAspectRatio(container);\n\n    const polyLinesData = chartData.yColumns.map(yCol => ({\n        aspectRatio,\n        color: yCol.color,\n        xPointsInPercents: chartData.xColumn.pointsPercentised,\n        yPointsInPercents: yCol.pointsPercentised,\n        isThin: true,\n    }));\n\n    let instance = self;\n    if (!instance) {\n        const svg = DomUtils.createSvgElement<SVGSVGElement>('svg');\n        container.appendChild(svg);\n\n        const polyLines = polyLinesData.map(data =>\n            PolyLine.render({\n                svg,\n                ...data,\n            }),\n        );\n\n        const selectionOverlay = SelectionOverlay.render({\n            container,\n            onChange,\n            initialX1,\n            initialX2,\n            mode,\n        });\n\n        instance = {\n            polyLines,\n            svg,\n            selectionOverlay,\n        };\n    } else {\n        const extraPolyLines = instance.polyLines.slice(\n            polyLinesData.length,\n            Infinity,\n        );\n        extraPolyLines.forEach(polyLine => polyLine.remove());\n\n        instance.polyLines = polyLinesData.map((data, index) => {\n            const polyLine = instance.polyLines[index];\n            polyLine.reRender(data);\n            return polyLine;\n        });\n\n        instance.selectionOverlay.reRender({\n            container,\n            mode,\n        });\n    }\n\n    instance.svg.setAttribute('viewBox', `0 0 ${100 * aspectRatio} 100`);\n\n    return instance;\n};\n\nexport const RangeSelector = ComponentUtils.create(render);\nexport type RangeSelectorInstance = ReturnType<typeof RangeSelector.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\n\nconst checkMarkHtml = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\"><path fill=\"#fff\" d=\"M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z\"/></svg>`;\n\ntype Instance = {\n    root: HTMLElement;\n    checkbox: HTMLElement;\n    text: HTMLElement;\n};\n\ntype RenderParams = {\n    text: string;\n    isChecked: boolean;\n    container: HTMLElement;\n    mode: ColorMode;\n    color: string;\n    onClick: () => void;\n    self?: Instance;\n};\nconst render = ({\n    container,\n    isChecked,\n    mode,\n    text,\n    color,\n    onClick,\n    self,\n}: RenderParams) => {\n    let instance = self;\n    if (!instance) {\n        const root = document.createElement('div');\n        container.appendChild(root);\n\n        root.addEventListener('click', onClick);\n\n        const checkbox = document.createElement('div');\n        root.appendChild(checkbox);\n\n        checkbox.innerHTML = checkMarkHtml;\n\n        const textEl = document.createElement('div');\n        root.appendChild(textEl);\n\n        instance = {\n            root,\n            checkbox,\n            text: textEl,\n        };\n    }\n\n    const colors = StyleUtils.getColors({ mode });\n\n    DomUtils.setElementStyle(instance.root, {\n        border: `${StyleUtils.SIZES_PX.lineThin}px solid ${\n            colors.switchBorder\n        }`,\n        borderRadius: '50px',\n        padding: '5px 10px',\n        display: 'flex',\n        alignItems: 'center',\n        marginRight: '20px',\n        cursor: 'pointer',\n    });\n\n    DomUtils.setElementStyle(instance.checkbox, {\n        border: `${StyleUtils.SIZES_PX.lineThin}px solid ${color}`,\n        backgroundColor: isChecked ? color : colors.background,\n        borderRadius: '50px',\n        width: '20px',\n        height: '20px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginRight: '12px',\n    });\n\n    const checkMark = instance.checkbox.children[0] as SVGElement;\n    DomUtils.setElementStyle(checkMark, {\n        opacity: isChecked ? '1' : '0',\n    });\n\n    DomUtils.setElementStyle(instance.text, {\n        color: colors.text,\n        fontSize: `${StyleUtils.SIZES_PX.switchText}px`,\n    });\n\n    instance.text.innerText = text;\n\n    return instance;\n};\n\nexport const SwitchButton = ComponentUtils.create(render);\n\nexport type SwitchButtonInstance = ReturnType<typeof SwitchButton.render>;\n","import { ComponentUtils } from 'src/utils/ComponentUtils';\nimport { ColorMode } from 'src/utils/StyleUtils';\nimport {\n    SwitchButton,\n    SwitchButtonInstance,\n} from 'src/components/ColSwitch/_SwitchButton';\nimport { ChartRenderData } from 'src/utils/ChartDataUtils/ChartData.types';\n\nconst handleClick = (index: number, params: RenderParams) => {\n    const { self } = params;\n    const isChecked = self.checkedIndexes.includes(index);\n    if (isChecked) {\n        if (self.checkedIndexes.length > 1) {\n            self.checkedIndexes = self.checkedIndexes.filter(i => i !== index);\n        }\n    } else {\n        self.checkedIndexes.push(index);\n    }\n\n    const params2 = { ...params, mode: self.mode };\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    render(params2);\n\n    params.onChange(self.checkedIndexes);\n};\n\ntype Instance = {\n    buttons: SwitchButtonInstance[];\n    checkedIndexes: number[];\n    mode: ColorMode;\n};\n\ntype RenderParams = {\n    chartData: ChartRenderData;\n    container: HTMLElement;\n    mode: ColorMode;\n    onChange: (checkedIndexes: number[]) => void;\n    self?: Instance;\n};\nconst render = (renderParams: RenderParams) => {\n    const { chartData, container, mode, self } = renderParams;\n\n    let instance = self;\n    if (!instance) {\n        const checkedIndexes = chartData.yColumns.map((_, index) => index);\n\n        const clickHandlerWrapper = { handleClick: (index: number) => {} };\n        const buttons = chartData.yColumns.map((col, index) => {\n            return SwitchButton.render({\n                container,\n                color: col.color,\n                isChecked: true,\n                mode,\n                text: col.name,\n                onClick: () => clickHandlerWrapper.handleClick(index),\n            });\n        });\n\n        instance = {\n            buttons,\n            checkedIndexes,\n            mode,\n        };\n\n        clickHandlerWrapper.handleClick = (index: number) =>\n            handleClick(index, { ...renderParams, self: instance });\n    } else {\n        instance.mode = mode;\n        instance.buttons.forEach((button, index) =>\n            button.reRender({\n                isChecked: instance.checkedIndexes.includes(index),\n                mode,\n            }),\n        );\n    }\n\n    return instance;\n};\n\nexport const ColSwitch = ComponentUtils.create(render);\n\nexport type ColSwitchInstance = ReturnType<typeof ColSwitch.render>;\n","import { PolyLine, PolyLineInstance } from 'src/components/PolyLine/PolyLine';\nimport { ChartDataUtils } from 'src/utils/ChartDataUtils/ChartDataUtils';\nimport {\n    ChartData,\n    ChartRenderData,\n} from 'src/utils/ChartDataUtils/ChartData.types';\nimport { EventUtils } from 'src/utils/EventUtils';\nimport {\n    MousePointer,\n    MousePointerInstance,\n} from 'src/components/MousePointer/MousePointer';\nimport { Grid, GridInstance } from 'src/components/Grid/Grid';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { ComponentUtils } from 'src/utils/ComponentUtils';\nimport {\n    RangeSelector,\n    RangeSelectorInstance,\n} from 'src/components/RangeSelector/RangeSelector';\nimport { ColorMode, StyleUtils } from 'src/utils/StyleUtils';\nimport {\n    ColSwitch,\n    ColSwitchInstance,\n} from 'src/components/ColSwitch/ColSwitch';\n\nconst possibleYMinDecreasingPercent = 20;\n\ntype InitialDataType = {\n    rangeXMinPercent: number;\n    rangeXMaxPercent: number;\n};\nconst InitialData: InitialDataType = {\n    rangeXMinPercent: 70,\n    rangeXMaxPercent: 100,\n};\n\nconst renderDom = (container: HTMLElement, mode: ColorMode) => {\n    const colors = StyleUtils.getColors({ mode });\n    const mainContainer = document.createElement('div');\n    DomUtils.setElementStyle(mainContainer, {\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n    });\n\n    const headerContainer = document.createElement('div');\n    DomUtils.setElementStyle(headerContainer, {\n        padding: '15px 5px',\n        fontSize: '16px',\n        lineHeight: '1.2',\n        fontWeight: 'bold',\n        color: colors.text,\n    });\n    headerContainer.innerText = '(No header)';\n\n    const svgContainer = document.createElement('div');\n    DomUtils.setElementStyle(svgContainer, {\n        flex: '1 1 auto',\n        position: 'relative',\n        display: 'flex',\n    });\n\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    DomUtils.setElementStyle(svg, {\n        width: '100%',\n        height: '100%',\n    });\n\n    const xScaleContainer = document.createElement('div');\n    DomUtils.setElementStyle(xScaleContainer, {\n        flex: '0 0 auto',\n        height: '30px',\n    });\n\n    const rangeSelectorContainer = document.createElement('div');\n    DomUtils.setElementStyle(rangeSelectorContainer, {\n        flex: '0 0 auto',\n        height: '60px',\n        position: 'relative',\n        display: 'flex',\n        flexDirection: 'column',\n    });\n\n    const switchContainer = document.createElement('div');\n    DomUtils.setElementStyle(switchContainer, {\n        flex: '0 0 auto',\n        padding: '20px 0',\n        position: 'relative',\n        display: 'flex',\n        flexWrap: 'wrap',\n    });\n\n    container.appendChild(mainContainer);\n    mainContainer.appendChild(headerContainer);\n    mainContainer.appendChild(svgContainer);\n    mainContainer.appendChild(xScaleContainer);\n    mainContainer.appendChild(rangeSelectorContainer);\n    mainContainer.appendChild(switchContainer);\n    svgContainer.appendChild(svg);\n\n    return {\n        svg,\n        mainContainer,\n        headerContainer,\n        xScaleContainer,\n        rangeSelectorContainer,\n        switchContainer,\n        svgContainer,\n    };\n};\n\nconst handleMouseMove = (event: MouseEvent, params: Required<Params>) => {\n    const { self } = params;\n    const { svg, currentPointerX, mousePointer } = self;\n    const {\n        // top, height,\n        left,\n        width,\n    } = svg.getBoundingClientRect();\n    const mouseX = event.clientX;\n    // const mouseY = event.clientY;\n\n    const mouseRelX = mouseX - left;\n    // const mouseRelY = mouseY - top;\n\n    const mousePercentX = (mouseRelX / width) * 100;\n    // const mousePercentY = (mouseRelY / height) * 100;\n\n    if (mousePercentX !== currentPointerX) {\n        self.currentPointerX = mousePercentX;\n\n        mousePointer.reRender({\n            isVisible: true,\n            xPercent: mousePercentX,\n            aspectRatio: DomUtils.getAspectRatio(svg),\n        });\n    }\n};\n\nconst handleMouseLeave = (event: MouseEvent, params: Required<Params>) => {\n    const { self } = params;\n    const { mousePointer } = self;\n    mousePointer.reRender({ isVisible: false });\n};\n\nconst handleResize = (params: Required<Params>) => {\n    const { self } = params;\n    const { svg } = self;\n\n    self.aspectRatio = DomUtils.getAspectRatio(svg);\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    render({ ...params, mode: self.mode });\n};\n\nconst handleRangeSelectionChange = (\n    xMinPercent: number,\n    xMaxPercent: number,\n    params: Required<Params>,\n) => {\n    const { self } = params;\n\n    self.xMinPercent = xMinPercent;\n    self.xMaxPercent = xMaxPercent;\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    render({ ...params, mode: self.mode });\n};\n\nconst handleCheckedIndexesChange = (\n    indexes: number[],\n    params: Required<Params>,\n) => {\n    const { self } = params;\n    self.checkedIndexes = indexes;\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    render({ ...params, mode: self.mode });\n};\n\nconst reRender = (params: Required<Params>) => {\n    const { self, mode } = params;\n    const {\n        svg,\n        grid,\n        polyLines,\n        mousePointer,\n        aspectRatio,\n        rangeSelector,\n        colSwitch,\n        headerContainer,\n    } = self;\n    const colors = StyleUtils.getColors({ mode });\n\n    DomUtils.setElementStyle(headerContainer, { color: colors.text });\n\n    svg.setAttribute('viewBox', `0 0 ${100 * aspectRatio} 100`);\n\n    const chartData = ChartDataUtils.transformDataToRender(params.data, {\n        xMinPercent: self.xMinPercent,\n        xMaxPercent: self.xMaxPercent,\n        includingYIndexes: self.checkedIndexes,\n        possibleYMinDecreasingPercent,\n    });\n\n    self.chartData = chartData;\n\n    grid.reRender({ chartData, aspectRatio, mode });\n\n    polyLines.forEach((polyLine, index) => {\n        const yCol = chartData.yColumns[index];\n        if (yCol) {\n            polyLine.reRender({\n                xPointsInPercents: chartData.xColumn.pointsPercentised,\n                yPointsInPercents: yCol.pointsPercentised,\n                aspectRatio,\n                color: yCol.color,\n                isHidden: false,\n            });\n        } else {\n            polyLine.reRender({\n                isHidden: true,\n                color: 'black',\n            });\n        }\n    });\n\n    mousePointer.reRender({ chartData, aspectRatio, mode });\n\n    rangeSelector.reRender({\n        mode,\n    });\n\n    colSwitch.reRender({ mode });\n};\n\ntype Instance = {\n    grid: GridInstance;\n    polyLines: PolyLineInstance[];\n    mousePointer: MousePointerInstance;\n    mainContainer: HTMLElement;\n    headerContainer: HTMLElement;\n    xScaleContainer: HTMLElement;\n    rangeSelectorContainer: HTMLElement;\n    rangeSelector: RangeSelectorInstance;\n    switchContainer: HTMLElement;\n    svgContainer: HTMLElement;\n    svg: SVGSVGElement;\n    chartData: ChartRenderData;\n    currentPointerX: number;\n    checkedIndexes: number[];\n    xMinPercent: number;\n    xMaxPercent: number;\n    aspectRatio: number;\n    colSwitch: ColSwitchInstance;\n    mode: ColorMode;\n};\n\ntype Params = {\n    container: HTMLElement;\n    data: ChartData;\n    mode: ColorMode;\n    self?: Instance;\n};\n\nconst render = (params: Params) => {\n    const { container, data, self } = params;\n\n    let instance = self;\n    if (!instance) {\n        const {\n            svgContainer,\n            xScaleContainer,\n            mainContainer,\n            headerContainer,\n            rangeSelectorContainer,\n            switchContainer,\n            svg,\n        } = renderDom(container, params.mode);\n\n        const chartDataUncut = ChartDataUtils.transformDataToRender(data);\n        const checkedIndexes = chartDataUncut.yColumns.map((y, index) => index);\n\n        const checkedIndexesChangeHandlerWrapper = {\n            onChage: (indexes: number[]) => {},\n        };\n        const colSwitch = ColSwitch.render({\n            mode: params.mode,\n            container: switchContainer,\n            chartData: chartDataUncut,\n            onChange: indexes =>\n                checkedIndexesChangeHandlerWrapper.onChage(indexes),\n        });\n\n        const aspectRatio = DomUtils.getAspectRatio(svg);\n\n        svg.setAttribute('viewBox', `0 0 ${100 * aspectRatio} 100`);\n\n        const chartData = ChartDataUtils.transformDataToRender(data, {\n            xMinPercent: InitialData.rangeXMinPercent,\n            xMaxPercent: InitialData.rangeXMaxPercent,\n            possibleYMinDecreasingPercent,\n        });\n\n        const grid = Grid.render({\n            svg,\n            aspectRatio,\n            mode: params.mode,\n            container: xScaleContainer,\n            chartData,\n        });\n\n        const { xColumn, yColumns } = chartData;\n\n        const xPointsPercentised = xColumn.pointsPercentised;\n\n        const polyLines = yColumns.map(column => {\n            return PolyLine.render({\n                svg,\n                color: column.color,\n                xPointsInPercents: xPointsPercentised,\n                yPointsInPercents: column.pointsPercentised,\n                aspectRatio,\n            });\n        });\n\n        const currentPointerX = 0;\n        const mousePointer = MousePointer.render({\n            container: svgContainer,\n            svg,\n            xPercent: currentPointerX,\n            aspectRatio,\n            chartData,\n            mode: params.mode,\n            isVisible: false,\n        });\n\n        const rangeSelectorChangeHandlerWrapper = {\n            onChange: (x1: number, x2: number) => {},\n        };\n        const rangeSelector = RangeSelector.render({\n            chartData: chartDataUncut,\n            container: rangeSelectorContainer,\n            onChange: (x1, x2) =>\n                rangeSelectorChangeHandlerWrapper.onChange(x1, x2),\n            initialX1: InitialData.rangeXMinPercent,\n            initialX2: InitialData.rangeXMaxPercent,\n            mode: params.mode,\n        });\n\n        instance = {\n            headerContainer,\n            svgContainer,\n            xScaleContainer,\n            mainContainer,\n            rangeSelectorContainer,\n            switchContainer,\n            svg,\n            polyLines,\n            grid,\n            mousePointer,\n            colSwitch,\n            rangeSelector,\n            currentPointerX,\n            chartData,\n            checkedIndexes,\n            xMinPercent: InitialData.rangeXMinPercent,\n            xMaxPercent: InitialData.rangeXMaxPercent,\n            aspectRatio,\n            mode: params.mode,\n        };\n\n        checkedIndexesChangeHandlerWrapper.onChage = (indexes: number[]) =>\n            handleCheckedIndexesChange(indexes, { ...params, self: instance });\n\n        rangeSelectorChangeHandlerWrapper.onChange = (x1: number, x2: number) =>\n            handleRangeSelectionChange(x1, x2, { ...params, self: instance });\n\n        svg.addEventListener('mousemove', event =>\n            handleMouseMove(event, {\n                ...params,\n                self: instance,\n            }),\n        );\n        svg.addEventListener('mouseleave', event =>\n            handleMouseLeave(event, {\n                ...params,\n                self: instance,\n            }),\n        );\n\n        window.addEventListener(\n            'resize',\n            EventUtils.throttle(\n                () => handleResize({ ...params, self: instance }),\n                66,\n            ),\n            false,\n        );\n    } else {\n        instance.mode = params.mode;\n        reRender(params);\n    }\n\n    return instance;\n};\n\nexport const Chart = ComponentUtils.create(render);\n\nexport type ChartInstance = ReturnType<typeof Chart.render>;\n","import { Chart } from 'src/components/Chart/Chart';\nimport { DomUtils } from 'src/utils/DomUtils';\nimport { StyleUtils } from 'src/utils/StyleUtils';\nimport { ChartData } from 'src/utils/ChartDataUtils/ChartData.types';\nimport chartDataUrl from 'src/assets/chartData.json';\n\nconst loadChartData = () => {\n    return fetch((chartDataUrl as any) as string).then(\n        (data: any) => data.json() as ChartData[],\n    );\n};\n\nloadChartData().then(chartData => {\n    const allChartsContainer = document.getElementsByClassName(\n        'chartWrapper',\n    )[0] as HTMLDivElement;\n\n    const charts = chartData.map(data => {\n        const container = document.createElement('div');\n        DomUtils.setElementStyle(container, {\n            width: '100%',\n            height: 'calc(100vh - 40px)',\n            boxSizing: 'border-box',\n            padding: '0 15px',\n        });\n\n        allChartsContainer.appendChild(container);\n\n        return Chart.render({\n            container,\n            data,\n            mode: 'day',\n        });\n    });\n\n    const footer = document.getElementsByClassName('footer')[0] as HTMLElement;\n    allChartsContainer.appendChild(footer);\n\n    const dayNightSwitch = document.getElementsByClassName(\n        'dayNightSwitch',\n    )[0] as HTMLElement;\n\n    const textsByMode = {\n        day: 'Switch to Night Mode',\n        night: 'Switch to Day Mode',\n    };\n    let currentMode: keyof typeof textsByMode = 'day';\n    DomUtils.setElementStyle(dayNightSwitch, {\n        fontSize: '16px',\n        color: '#1F8DE0',\n    });\n\n    dayNightSwitch.addEventListener('click', () => {\n        currentMode = currentMode === 'day' ? 'night' : 'day';\n        dayNightSwitch.innerText = textsByMode[currentMode];\n        charts.forEach(chart => chart.reRender({ mode: currentMode }));\n        const colors = StyleUtils.getColors({ mode: currentMode });\n        DomUtils.setElementStyle(footer, {\n            backgroundColor: colors.background,\n        });\n        DomUtils.setElementStyle(document.body, {\n            backgroundColor: colors.background,\n        });\n    });\n});\n"],"sourceRoot":""}